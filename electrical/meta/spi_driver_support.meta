#if TARGET_NAME_IS_SandboxNucleoH7S3L8
    #error Target "SandboxNucleoH7S3L8" cannot use the SPI driver without first specifying the peripheral instances to have handles for.
#endif
#if TARGET_NAME_IS_SandboxNucleoH533RE
    #error Target "SandboxNucleoH533RE" cannot use the SPI driver without first specifying the peripheral instances to have handles for.
#endif
#if TARGET_NAME_IS_DemoI2C
    #error Target "DemoI2C" cannot use the SPI driver without first specifying the peripheral instances to have handles for.
#endif
#if TARGET_NAME_IS_DemoTimer
    #error Target "DemoTimer" cannot use the SPI driver without first specifying the peripheral instances to have handles for.
#endif
#if TARGET_NAME_IS_DemoSPI
    enum SPIHandle : u32
    {
        SPIHandle_primary,
    };
    static constexpr u32 SPIHandle_COUNT = 1;
    #define SPIx_ SPI_
    static const struct { typeof(SPI1) SPIx; } SPI_TABLE[] =
        {
            [SPIHandle_primary] = { .SPIx = SPI1 },
        };
#endif
#undef _EXPAND_HANDLE
#define _EXPAND_HANDLE\
    \
    if (!(0 <= handle && handle < SPIHandle_COUNT))\
    {\
        panic;\
    }\
    \
    struct SPIDriver* const driver = &_SPI_drivers[handle];\
    \
    auto const SPIx = SPI_TABLE[handle].SPIx;\


#if TARGET_NAME_IS_SandboxNucleoH7S3L8
#endif
#if TARGET_NAME_IS_SandboxNucleoH533RE
#endif
#if TARGET_NAME_IS_DemoI2C
#endif
#if TARGET_NAME_IS_DemoTimer
#endif
#if TARGET_NAME_IS_DemoSPI

    static void
    _SPI_update_entirely(enum SPIHandle handle);

    INTERRUPT_SPI1
    {
        _SPI_update_entirely(SPIHandle_primary);
    }

#endif
