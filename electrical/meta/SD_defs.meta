enum SD : u32
{
    SD_SDMMC1,
    SD_SDMMC2,
};
static constexpr u32 SD_COUNT = 2;
enum SDCmd : u32
{
    SDCmd_GO_IDLE_STATE,
    SDCmd_ALL_SEND_CID,
    SDCmd_SEND_RELATIVE_ADDR,
    SDCmd_SWITCH_FUNC,
    SDCmd_SELECT_DESELECT_CARD,
    SDCmd_SEND_IF_COND,
    SDCmd_SEND_CSD,
    SDCmd_STOP_TRANSMISSION,
    SDCmd_SEND_STATUS_TASK_STATUS,
    SDCmd_SET_BLOCK_LEN,
    SDCmd_READ_SINGLE_BLOCK,
    SDCmd_READ_MULTIPLE_BLOCK,
    SDCmd_WRITE_BLOCK,
    SDCmd_WRITE_MULTIPLE_BLOCK,
    SDCmd_APP_CMD,
    SDCmd_SET_BUS_WIDTH,
    SDCmd_SD_SEND_OP_COND,
    SDCmd_SEND_SCR,
};
static constexpr u32 SDCmd_COUNT = 18;
enum SDCardSpecificDataVersion : u32
{
    SDCardSpecificDataVersion_2 = 1,
};
static constexpr u32 SDCardSpecificDataVersion_COUNT = 1;
enum SDConfigurationRegisterVersion : u32
{
    SDConfigurationRegisterVersion_1 = 0,
};
static constexpr u32 SDConfigurationRegisterVersion_COUNT = 1;
enum SDSwitchFunctionStatusVersion : u32
{
    SDSwitchFunctionStatusVersion_1 = 0,
    SDSwitchFunctionStatusVersion_2 = 1,
};
static constexpr u32 SDSwitchFunctionStatusVersion_COUNT = 2;
#if TARGET_MCU_IS_STM32H533RET6
    enum SDWaitResp : u32
    {
        SDWaitResp_none,
        SDWaitResp_r1,
        SDWaitResp_r1b,
        SDWaitResp_r6,
        SDWaitResp_r7,
        SDWaitResp_r3,
        SDWaitResp_r2,
    };
    static constexpr u32 SDWaitResp_COUNT = 7;
#endif
#if TARGET_MCU_IS_STM32H7S3L8H6
#endif
static const struct { SDMMC_TypeDef* peripheral; enum NVICInterrupt interrupt; } SD_DRIVER_TABLE[] =
    {
        { .peripheral = SDMMC1, .interrupt = NVICInterrupt_SDMMC1 },
        { .peripheral = SDMMC2, .interrupt = NVICInterrupt_SDMMC2 },
    };
#if TARGET_MCU_IS_STM32H533RET6
    static const struct { u8 code; b8 acmd; enum SDWaitResp waitresp_kind; u8 waitresp_bits; b8 receiving; } SD_CMDS[] =
        {
            { .code = 0 , .acmd = false, .waitresp_kind = SDWaitResp_none, .waitresp_bits = 0b00, .receiving = false },
            { .code = 2 , .acmd = false, .waitresp_kind = SDWaitResp_r2  , .waitresp_bits = 0b11, .receiving = false },
            { .code = 3 , .acmd = false, .waitresp_kind = SDWaitResp_r6  , .waitresp_bits = 0b01, .receiving = false },
            { .code = 6 , .acmd = false, .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = true  },
            { .code = 7 , .acmd = false, .waitresp_kind = SDWaitResp_r1b , .waitresp_bits = 0b01, .receiving = false },
            { .code = 8 , .acmd = false, .waitresp_kind = SDWaitResp_r7  , .waitresp_bits = 0b01, .receiving = false },
            { .code = 9 , .acmd = false, .waitresp_kind = SDWaitResp_r2  , .waitresp_bits = 0b11, .receiving = false },
            { .code = 12, .acmd = false, .waitresp_kind = SDWaitResp_r1b , .waitresp_bits = 0b01, .receiving = false },
            { .code = 13, .acmd = false, .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = false },
            { .code = 16, .acmd = false, .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = false },
            { .code = 17, .acmd = false, .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = true  },
            { .code = 18, .acmd = false, .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = true  },
            { .code = 24, .acmd = false, .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = false },
            { .code = 25, .acmd = false, .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = false },
            { .code = 55, .acmd = false, .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = false },
            { .code = 6 , .acmd = true , .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = false },
            { .code = 41, .acmd = true , .waitresp_kind = SDWaitResp_r3  , .waitresp_bits = 0b10, .receiving = false },
            { .code = 51, .acmd = true , .waitresp_kind = SDWaitResp_r1  , .waitresp_bits = 0b01, .receiving = true  },
        };
#endif
#if TARGET_MCU_IS_STM32H7S3L8H6
#endif
struct SDCardSpecificData
{
    enum SDCardSpecificDataVersion CSD_STRUCTURE;
    union
    {
        struct
        {
            u8 v2_CSD_STRUCTURE;
            u8 v2_TAAC;
            u8 v2_NSAC;
            u8 v2_TRAN_SPEED;
            u16 v2_CCC;
            u8 v2_READ_BL_LEN;
            u8 v2_READ_BL_PARTIAL;
            u8 v2_WRITE_BLK_MISALIGN;
            u8 v2_READ_BLK_MISALIGN;
            u8 v2_DSR_IMP;
            u32 v2_C_SIZE;
            u8 v2_ERASE_BLK_EN;
            u8 v2_SECTOR_SIZE;
            u8 v2_WP_GRP_SIZE;
            u8 v2_WP_GRP_ENABLE;
            u8 v2_R2W_FACTOR;
            u8 v2_WRITE_BL_LEN;
            u8 v2_WRITE_BL_PARTIAL;
            u8 v2_FILE_FORMAT_GRP;
            u8 v2_COPY;
            u8 v2_PERM_WRITE_PROTECT;
            u8 v2_TEMP_WRITE_PROTECT;
            u8 v2_FILE_FORMAT;
            u8 v2_WP_UPC;
            u8 v2_CRC;
        };
    };
};
struct SDConfigurationRegister
{
    enum SDConfigurationRegisterVersion SCR_STRUCTURE;
    union
    {
        struct
        {
            u8 v1_SCR_STRUCTURE;
            u8 v1_SD_SPEC;
            u8 v1_DATA_STAT_AFTER_ERASE;
            u8 v1_SD_SECURITY;
            u8 v1_SD_BUS_WIDTHS;
            u8 v1_SD_SPEC3;
            u8 v1_EX_SECURITY;
            u8 v1_SD_SPEC4;
            u8 v1_SD_SPECX;
            u8 v1_CMD_SUPPORT;
        };
    };
};
struct SDSwitchFunctionStatus
{
    enum SDSwitchFunctionStatusVersion version;
    union
    {
        struct
        {
            u16 v1_max_consumption;
            u16 v1_group_6_support;
            u16 v1_group_5_support;
            u16 v1_group_4_support;
            u16 v1_group_3_support;
            u16 v1_group_2_support;
            u16 v1_group_1_support;
            u8 v1_group_6_selection;
            u8 v1_group_5_selection;
            u8 v1_group_4_selection;
            u8 v1_group_3_selection;
            u8 v1_group_2_selection;
            u8 v1_group_1_selection;
            u8 v1_version;
        };
        struct
        {
            u16 v2_max_consumption;
            u16 v2_group_6_support;
            u16 v2_group_5_support;
            u16 v2_group_4_support;
            u16 v2_group_3_support;
            u16 v2_group_2_support;
            u16 v2_group_1_support;
            u8 v2_group_6_selection;
            u8 v2_group_5_selection;
            u8 v2_group_4_selection;
            u8 v2_group_3_selection;
            u8 v2_group_2_selection;
            u8 v2_group_1_selection;
            u8 v2_version;
            u16 v2_group_6_busy;
            u16 v2_group_5_busy;
            u16 v2_group_4_busy;
            u16 v2_group_3_busy;
            u16 v2_group_2_busy;
            u16 v2_group_1_busy;
        };
    };
};
