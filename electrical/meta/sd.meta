enum SDCmd : u32
{
    SDCmd_GO_IDLE_STATE,
    SDCmd_ALL_SEND_CID,
    SDCmd_SEND_RELATIVE_ADDR,
    SDCmd_SWITCH_FUNC,
    SDCmd_SELECT_DESELECT_CARD,
    SDCmd_SEND_IF_COND,
    SDCmd_SEND_CSD,
    SDCmd_STOP_TRANSMISSION,
    SDCmd_SEND_STATUS_TASK_STATUS,
    SDCmd_SET_BLOCK_LEN,
    SDCmd_READ_SINGLE_BLOCK,
    SDCmd_READ_MULTIPLE_BLOCK,
    SDCmd_WRITE_BLOCK,
    SDCmd_WRITE_MULTIPLE_BLOCK,
    SDCmd_APP_CMD,
    SDCmd_SET_BUS_WIDTH,
    SDCmd_SD_SEND_OP_COND,
    SDCmd_SEND_SCR,
};
static constexpr u32 SDCmd_COUNT = 18;
#if TARGET_MCU_IS_STM32H533RET6
    enum SDWaitRespType : u32
    {
        SDWaitRespType_none,
        SDWaitRespType_r1,
        SDWaitRespType_r1b,
        SDWaitRespType_r6,
        SDWaitRespType_r7,
        SDWaitRespType_r3,
        SDWaitRespType_r2,
    };
    static constexpr u32 SDWaitRespType_COUNT = 7;
    enum SDWaitRespCode : u32
    {
        SDWaitRespCode_none = 0b00,
        SDWaitRespCode_r1   = 0b01,
        SDWaitRespCode_r1b  = 0b01,
        SDWaitRespCode_r6   = 0b01,
        SDWaitRespCode_r7   = 0b01,
        SDWaitRespCode_r3   = 0b10,
        SDWaitRespCode_r2   = 0b11,
    };
    static constexpr u32 SDWaitRespCode_COUNT = 7;
#endif
#if TARGET_MCU_IS_STM32H7S3L8H6
#endif
static const struct { u8 code; b32 acmd; enum SDWaitRespType waitresp_type; enum SDWaitRespCode waitresp_code; b32 receiving; } SD_CMDS[] =
    {
        { .code = 0 , .acmd = false, .waitresp_type = SDWaitRespType_none, .waitresp_code = SDWaitRespCode_none, .receiving = false },
        { .code = 2 , .acmd = false, .waitresp_type = SDWaitRespType_r2  , .waitresp_code = SDWaitRespCode_r2  , .receiving = false },
        { .code = 3 , .acmd = false, .waitresp_type = SDWaitRespType_r6  , .waitresp_code = SDWaitRespCode_r6  , .receiving = false },
        { .code = 6 , .acmd = false, .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = true  },
        { .code = 7 , .acmd = false, .waitresp_type = SDWaitRespType_r1b , .waitresp_code = SDWaitRespCode_r1b , .receiving = false },
        { .code = 8 , .acmd = false, .waitresp_type = SDWaitRespType_r7  , .waitresp_code = SDWaitRespCode_r7  , .receiving = false },
        { .code = 9 , .acmd = false, .waitresp_type = SDWaitRespType_r2  , .waitresp_code = SDWaitRespCode_r2  , .receiving = false },
        { .code = 12, .acmd = false, .waitresp_type = SDWaitRespType_r1b , .waitresp_code = SDWaitRespCode_r1b , .receiving = false },
        { .code = 13, .acmd = false, .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = false },
        { .code = 16, .acmd = false, .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = false },
        { .code = 17, .acmd = false, .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = true  },
        { .code = 18, .acmd = false, .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = true  },
        { .code = 24, .acmd = false, .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = false },
        { .code = 25, .acmd = false, .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = false },
        { .code = 55, .acmd = false, .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = false },
        { .code = 6 , .acmd = true , .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = false },
        { .code = 41, .acmd = true , .waitresp_type = SDWaitRespType_r3  , .waitresp_code = SDWaitRespCode_r3  , .receiving = false },
        { .code = 51, .acmd = true , .waitresp_type = SDWaitRespType_r1  , .waitresp_code = SDWaitRespCode_r1  , .receiving = true  },
    };
enum SDCardSpecificDataVersion : u32
{
    SDCardSpecificDataVersion_2 = 1,
};
static constexpr u32 SDCardSpecificDataVersion_COUNT = 1;
struct SDCardSpecificData
{
    enum SDCardSpecificDataVersion CSD_STRUCTURE;
    union
    {
        struct
        {
            u8 v2_CSD_STRUCTURE;
            u8 v2_TAAC;
            u8 v2_NSAC;
            u8 v2_TRAN_SPEED;
            u16 v2_CCC;
            u8 v2_READ_BL_LEN;
            u8 v2_READ_BL_PARTIAL;
            u8 v2_WRITE_BLK_MISALIGN;
            u8 v2_READ_BLK_MISALIGN;
            u8 v2_DSR_IMP;
            u32 v2_C_SIZE;
            u8 v2_ERASE_BLK_EN;
            u8 v2_SECTOR_SIZE;
            u8 v2_WP_GRP_SIZE;
            u8 v2_WP_GRP_ENABLE;
            u8 v2_R2W_FACTOR;
            u8 v2_WRITE_BL_LEN;
            u8 v2_WRITE_BL_PARTIAL;
            u8 v2_FILE_FORMAT_GRP;
            u8 v2_COPY;
            u8 v2_PERM_WRITE_PROTECT;
            u8 v2_TEMP_WRITE_PROTECT;
            u8 v2_FILE_FORMAT;
            u8 v2_WP_UPC;
            u8 v2_CRC;
        };
    };
};
enum SDConfigurationRegisterVersion : u32
{
    SDConfigurationRegisterVersion_1 = 0,
};
static constexpr u32 SDConfigurationRegisterVersion_COUNT = 1;
struct SDConfigurationRegister
{
    enum SDConfigurationRegisterVersion SCR_STRUCTURE;
    union
    {
        struct
        {
            u8 v1_SCR_STRUCTURE;
            u8 v1_SD_SPEC;
            u8 v1_DATA_STAT_AFTER_ERASE;
            u8 v1_SD_SECURITY;
            u8 v1_SD_BUS_WIDTHS;
            u8 v1_SD_SPEC3;
            u8 v1_EX_SECURITY;
            u8 v1_SD_SPEC4;
            u8 v1_SD_SPECX;
            u8 v1_CMD_SUPPORT;
        };
    };
};
enum SDSwitchFunctionStatusVersion : u32
{
    SDSwitchFunctionStatusVersion_1 = 0,
    SDSwitchFunctionStatusVersion_2 = 1,
};
static constexpr u32 SDSwitchFunctionStatusVersion_COUNT = 2;
struct SDSwitchFunctionStatus
{
    enum SDSwitchFunctionStatusVersion version;
    union
    {
        struct
        {
            u16 v1_max_consumption;
            u16 v1_group_6_support;
            u16 v1_group_5_support;
            u16 v1_group_4_support;
            u16 v1_group_3_support;
            u16 v1_group_2_support;
            u16 v1_group_1_support;
            u8 v1_group_6_selection;
            u8 v1_group_5_selection;
            u8 v1_group_4_selection;
            u8 v1_group_3_selection;
            u8 v1_group_2_selection;
            u8 v1_group_1_selection;
            u8 v1_version;
        };
        struct
        {
            u16 v2_max_consumption;
            u16 v2_group_6_support;
            u16 v2_group_5_support;
            u16 v2_group_4_support;
            u16 v2_group_3_support;
            u16 v2_group_2_support;
            u16 v2_group_1_support;
            u8 v2_group_6_selection;
            u8 v2_group_5_selection;
            u8 v2_group_4_selection;
            u8 v2_group_3_selection;
            u8 v2_group_2_selection;
            u8 v2_group_1_selection;
            u8 v2_version;
            u16 v2_group_6_busy;
            u16 v2_group_5_busy;
            u16 v2_group_4_busy;
            u16 v2_group_3_busy;
            u16 v2_group_2_busy;
            u16 v2_group_1_busy;
        };
    };
};
#define SD_parse_register(DST, SRC)\
    _Generic\
    (\
        (DST),\
        struct SDCardSpecificData* : _SD_parse_SDCardSpecificData,\
        struct SDConfigurationRegister* : _SD_parse_SDConfigurationRegister,\
        struct SDSwitchFunctionStatus* : _SD_parse_SDSwitchFunctionStatus\
    )((DST), (SRC))\

static useret b32
_SD_parse_SDCardSpecificData(struct SDCardSpecificData* destination, u8* source)
{
    *destination = (typeof(*destination)) {0};
    switch ((source[0] >> 6))
    {
        case SDCardSpecificDataVersion_2:
        {
            *destination =
                (struct SDCardSpecificData)
                {
                    .CSD_STRUCTURE         = (source[0] >> 6)                                       ,
                    .v2_CSD_STRUCTURE      = (source[0] >> 6)                                       ,
                    .v2_TAAC               = source[1]                                              ,
                    .v2_NSAC               = source[2]                                              ,
                    .v2_TRAN_SPEED         = source[3]                                              ,
                    .v2_CCC                = (source[5] >> 4) | (source[4] << 4)                    ,
                    .v2_READ_BL_LEN        = (source[5] & 15)                                       ,
                    .v2_READ_BL_PARTIAL    = (source[6] >> 7)                                       ,
                    .v2_WRITE_BLK_MISALIGN = ((source[6] >> 6) & 1)                                 ,
                    .v2_READ_BLK_MISALIGN  = ((source[6] >> 5) & 1)                                 ,
                    .v2_DSR_IMP            = ((source[6] >> 4) & 1)                                 ,
                    .v2_C_SIZE             = source[9] | (source[8] << 8) | ((source[7] & 63) << 16),
                    .v2_ERASE_BLK_EN       = ((source[10] >> 6) & 1)                                ,
                    .v2_SECTOR_SIZE        = (source[11] >> 7) | ((source[10] & 63) << 1)           ,
                    .v2_WP_GRP_SIZE        = (source[11] & 127)                                     ,
                    .v2_WP_GRP_ENABLE      = (source[12] >> 7)                                      ,
                    .v2_R2W_FACTOR         = ((source[12] >> 2) & 7)                                ,
                    .v2_WRITE_BL_LEN       = (source[13] >> 6) | ((source[12] & 3) << 2)            ,
                    .v2_WRITE_BL_PARTIAL   = ((source[13] >> 5) & 1)                                ,
                    .v2_FILE_FORMAT_GRP    = (source[14] >> 7)                                      ,
                    .v2_COPY               = ((source[14] >> 6) & 1)                                ,
                    .v2_PERM_WRITE_PROTECT = ((source[14] >> 5) & 1)                                ,
                    .v2_TEMP_WRITE_PROTECT = ((source[14] >> 4) & 1)                                ,
                    .v2_FILE_FORMAT        = ((source[14] >> 2) & 3)                                ,
                    .v2_WP_UPC             = ((source[14] >> 1) & 1)                                ,
                    .v2_CRC                = (source[15] >> 1)                                      ,
                };
            if (destination->v2_TAAC               != 0x0E        ) return false;
            if (destination->v2_NSAC               != 0x00        ) return false;
            if (destination->v2_TRAN_SPEED         != 0b0'0110'010) return false;
            if (destination->v2_READ_BL_LEN        != 0x09        ) return false;
            if (destination->v2_READ_BL_PARTIAL    != 0           ) return false;
            if (destination->v2_WRITE_BLK_MISALIGN != 0           ) return false;
            if (destination->v2_READ_BLK_MISALIGN  != 0           ) return false;
            if (destination->v2_ERASE_BLK_EN       != 1           ) return false;
            if (destination->v2_SECTOR_SIZE        != 0x7F        ) return false;
            if (destination->v2_WP_GRP_SIZE        != 0x00        ) return false;
            if (destination->v2_WP_GRP_ENABLE      != 0           ) return false;
            if (destination->v2_R2W_FACTOR         != 0x02        ) return false;
            if (destination->v2_WRITE_BL_LEN       != 0x09        ) return false;
            if (destination->v2_WRITE_BL_PARTIAL   != 0           ) return false;
            if (destination->v2_FILE_FORMAT_GRP    != 0           ) return false;
            if (destination->v2_FILE_FORMAT        != 0           ) return false;
        } break;
        default: return false;
    }
    return true;
}
static useret b32
_SD_parse_SDConfigurationRegister(struct SDConfigurationRegister* destination, u8* source)
{
    *destination = (typeof(*destination)) {0};
    switch ((source[0] >> 4))
    {
        case SDConfigurationRegisterVersion_1:
        {
            *destination =
                (struct SDConfigurationRegister)
                {
                    .SCR_STRUCTURE            = (source[0] >> 4)                         ,
                    .v1_SCR_STRUCTURE         = (source[0] >> 4)                         ,
                    .v1_SD_SPEC               = (source[0] & 15)                         ,
                    .v1_DATA_STAT_AFTER_ERASE = (source[1] >> 7)                         ,
                    .v1_SD_SECURITY           = ((source[1] >> 4) & 7)                   ,
                    .v1_SD_BUS_WIDTHS         = (source[1] & 15)                         ,
                    .v1_SD_SPEC3              = (source[2] >> 7)                         ,
                    .v1_EX_SECURITY           = ((source[2] >> 3) & 15)                  ,
                    .v1_SD_SPEC4              = ((source[2] >> 2) & 1)                   ,
                    .v1_SD_SPECX              = (source[3] >> 6) | ((source[2] & 3) << 2),
                    .v1_CMD_SUPPORT           = (source[3] & 31)                         ,
                };
        } break;
        default: return false;
    }
    return true;
}
static useret b32
_SD_parse_SDSwitchFunctionStatus(struct SDSwitchFunctionStatus* destination, u8* source)
{
    *destination = (typeof(*destination)) {0};
    switch (source[17])
    {
        case SDSwitchFunctionStatusVersion_1:
        {
            *destination =
                (struct SDSwitchFunctionStatus)
                {
                    .version              = source[17]                    ,
                    .v1_max_consumption   = source[1] | (source[0] << 8)  ,
                    .v1_group_6_support   = source[3] | (source[2] << 8)  ,
                    .v1_group_5_support   = source[5] | (source[4] << 8)  ,
                    .v1_group_4_support   = source[7] | (source[6] << 8)  ,
                    .v1_group_3_support   = source[9] | (source[8] << 8)  ,
                    .v1_group_2_support   = source[11] | (source[10] << 8),
                    .v1_group_1_support   = source[13] | (source[12] << 8),
                    .v1_group_6_selection = (source[14] >> 4)             ,
                    .v1_group_5_selection = (source[14] & 15)             ,
                    .v1_group_4_selection = (source[15] >> 4)             ,
                    .v1_group_3_selection = (source[15] & 15)             ,
                    .v1_group_2_selection = (source[16] >> 4)             ,
                    .v1_group_1_selection = (source[16] & 15)             ,
                    .v1_version           = source[17]                    ,
                };
        } break;
        case SDSwitchFunctionStatusVersion_2:
        {
            *destination =
                (struct SDSwitchFunctionStatus)
                {
                    .version              = source[17]                    ,
                    .v2_max_consumption   = source[1] | (source[0] << 8)  ,
                    .v2_group_6_support   = source[3] | (source[2] << 8)  ,
                    .v2_group_5_support   = source[5] | (source[4] << 8)  ,
                    .v2_group_4_support   = source[7] | (source[6] << 8)  ,
                    .v2_group_3_support   = source[9] | (source[8] << 8)  ,
                    .v2_group_2_support   = source[11] | (source[10] << 8),
                    .v2_group_1_support   = source[13] | (source[12] << 8),
                    .v2_group_6_selection = (source[14] >> 4)             ,
                    .v2_group_5_selection = (source[14] & 15)             ,
                    .v2_group_4_selection = (source[15] >> 4)             ,
                    .v2_group_3_selection = (source[15] & 15)             ,
                    .v2_group_2_selection = (source[16] >> 4)             ,
                    .v2_group_1_selection = (source[16] & 15)             ,
                    .v2_version           = source[17]                    ,
                    .v2_group_6_busy      = source[19] | (source[18] << 8),
                    .v2_group_5_busy      = source[21] | (source[20] << 8),
                    .v2_group_4_busy      = source[23] | (source[22] << 8),
                    .v2_group_3_busy      = source[25] | (source[24] << 8),
                    .v2_group_2_busy      = source[27] | (source[26] << 8),
                    .v2_group_1_busy      = source[29] | (source[28] << 8),
                };
        } break;
        default: return false;
    }
    return true;
}
