#define _PORT_FOR_GPIO_WRITE(NAME) __MACRO_OVERLOAD___PORT_FOR_GPIO_WRITE__##NAME
#define _NUMBER_FOR_GPIO_WRITE(NAME) __MACRO_OVERLOAD___NUMBER_FOR_GPIO_WRITE__##NAME
#define _PORT_FOR_GPIO_READ(NAME) __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__##NAME
#define _NUMBER_FOR_GPIO_READ(NAME) __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__##NAME
#if TARGET_NAME_IS_SandboxNucleoH7S3L8
    #if STPY_IMPLEMENTATION
        enum NVICInterrupt : u32
        {
            NVICInterrupt_USART3 = USART3_IRQn,
        };
        static constexpr u32 NVICInterrupt_COUNT = 1;
        extern void INTERRUPT_BusFault(void);
        extern void INTERRUPT_Default(void);
        extern void INTERRUPT_Reset(void);
        extern void INTERRUPT_USART3(void);
        extern void INTERRUPT_UsageFault(void);
        void (* const INTERRUPT_VECTOR_TABLE[])(void) __attribute__((used, section(".INTERRUPT_VECTOR_TABLE"))) =
            {
                (void*) INITIAL_STACK_ADDRESS, // [-16] Initial Stack Address
                INTERRUPT_Reset              , // [-15] Reset
                INTERRUPT_Default            , // [-14] NonMaskableInt
                INTERRUPT_Default            , // [-13] HardFault
                INTERRUPT_Default            , // [-12] MemoryManagement
                INTERRUPT_BusFault           , // [-11] BusFault
                INTERRUPT_UsageFault         , // [-10] UsageFault
                INTERRUPT_Default            , // [ -9] Reserved
                INTERRUPT_Default            , // [ -8] Reserved
                INTERRUPT_Default            , // [ -7] Reserved
                INTERRUPT_Default            , // [ -6] Reserved
                INTERRUPT_Default            , // [ -5] SVCall
                INTERRUPT_Default            , // [ -4] DebugMonitor
                INTERRUPT_Default            , // [ -3] Reserved
                INTERRUPT_Default            , // [ -2] PendSV
                INTERRUPT_Default            , // [ -1] SysTick
                INTERRUPT_Default            , // [  0] PVD_PVM
                INTERRUPT_Default            , // [  1] Reserved
                INTERRUPT_Default            , // [  2] DTS
                INTERRUPT_Default            , // [  3] IWDG
                INTERRUPT_Default            , // [  4] WWDG
                INTERRUPT_Default            , // [  5] RCC
                INTERRUPT_Default            , // [  6] Reserved
                INTERRUPT_Default            , // [  7] Reserved
                INTERRUPT_Default            , // [  8] FLASH
                INTERRUPT_Default            , // [  9] RAMECC
                INTERRUPT_Default            , // [ 10] FPU
                INTERRUPT_Default            , // [ 11] Reserved
                INTERRUPT_Default            , // [ 12] Reserved
                INTERRUPT_Default            , // [ 13] TAMP
                INTERRUPT_Default            , // [ 14] Reserved
                INTERRUPT_Default            , // [ 15] Reserved
                INTERRUPT_Default            , // [ 16] EXTI0
                INTERRUPT_Default            , // [ 17] EXTI1
                INTERRUPT_Default            , // [ 18] EXTI2
                INTERRUPT_Default            , // [ 19] EXTI3
                INTERRUPT_Default            , // [ 20] EXTI4
                INTERRUPT_Default            , // [ 21] EXTI5
                INTERRUPT_Default            , // [ 22] EXTI6
                INTERRUPT_Default            , // [ 23] EXTI7
                INTERRUPT_Default            , // [ 24] EXTI8
                INTERRUPT_Default            , // [ 25] EXTI9
                INTERRUPT_Default            , // [ 26] EXTI10
                INTERRUPT_Default            , // [ 27] EXTI11
                INTERRUPT_Default            , // [ 28] EXTI12
                INTERRUPT_Default            , // [ 29] EXTI13
                INTERRUPT_Default            , // [ 30] EXTI14
                INTERRUPT_Default            , // [ 31] EXTI15
                INTERRUPT_Default            , // [ 32] RTC
                INTERRUPT_Default            , // [ 33] SAES
                INTERRUPT_Default            , // [ 34] CRYP
                INTERRUPT_Default            , // [ 35] PKA
                INTERRUPT_Default            , // [ 36] HASH
                INTERRUPT_Default            , // [ 37] RNG
                INTERRUPT_Default            , // [ 38] ADC1_2
                INTERRUPT_Default            , // [ 39] GPDMA1_Channel0
                INTERRUPT_Default            , // [ 40] GPDMA1_Channel1
                INTERRUPT_Default            , // [ 41] GPDMA1_Channel2
                INTERRUPT_Default            , // [ 42] GPDMA1_Channel3
                INTERRUPT_Default            , // [ 43] GPDMA1_Channel4
                INTERRUPT_Default            , // [ 44] GPDMA1_Channel5
                INTERRUPT_Default            , // [ 45] GPDMA1_Channel6
                INTERRUPT_Default            , // [ 46] GPDMA1_Channel7
                INTERRUPT_Default            , // [ 47] TIM1_BRK
                INTERRUPT_Default            , // [ 48] TIM1_UP
                INTERRUPT_Default            , // [ 49] TIM1_TRG_COM
                INTERRUPT_Default            , // [ 50] TIM1_CC
                INTERRUPT_Default            , // [ 51] TIM2
                INTERRUPT_Default            , // [ 52] TIM3
                INTERRUPT_Default            , // [ 53] TIM4
                INTERRUPT_Default            , // [ 54] TIM5
                INTERRUPT_Default            , // [ 55] TIM6
                INTERRUPT_Default            , // [ 56] TIM7
                INTERRUPT_Default            , // [ 57] TIM9
                INTERRUPT_Default            , // [ 58] SPI1
                INTERRUPT_Default            , // [ 59] SPI2
                INTERRUPT_Default            , // [ 60] SPI3
                INTERRUPT_Default            , // [ 61] SPI4
                INTERRUPT_Default            , // [ 62] SPI5
                INTERRUPT_Default            , // [ 63] SPI6
                INTERRUPT_Default            , // [ 64] HPDMA1_Channel0
                INTERRUPT_Default            , // [ 65] HPDMA1_Channel1
                INTERRUPT_Default            , // [ 66] HPDMA1_Channel2
                INTERRUPT_Default            , // [ 67] HPDMA1_Channel3
                INTERRUPT_Default            , // [ 68] HPDMA1_Channel4
                INTERRUPT_Default            , // [ 69] HPDMA1_Channel5
                INTERRUPT_Default            , // [ 70] HPDMA1_Channel6
                INTERRUPT_Default            , // [ 71] HPDMA1_Channel7
                INTERRUPT_Default            , // [ 72] SAI1_A
                INTERRUPT_Default            , // [ 73] SAI1_B
                INTERRUPT_Default            , // [ 74] SAI2_A
                INTERRUPT_Default            , // [ 75] SAI2_B
                INTERRUPT_Default            , // [ 76] I2C1_EV
                INTERRUPT_Default            , // [ 77] I2C1_ER
                INTERRUPT_Default            , // [ 78] I2C2_EV
                INTERRUPT_Default            , // [ 79] I2C2_ER
                INTERRUPT_Default            , // [ 80] I2C3_EV
                INTERRUPT_Default            , // [ 81] I2C3_ER
                INTERRUPT_Default            , // [ 82] USART1
                INTERRUPT_Default            , // [ 83] USART2
                INTERRUPT_USART3             , // [ 84] USART3
                INTERRUPT_Default            , // [ 85] UART4
                INTERRUPT_Default            , // [ 86] UART5
                INTERRUPT_Default            , // [ 87] UART7
                INTERRUPT_Default            , // [ 88] UART8
                INTERRUPT_Default            , // [ 89] I3C1_EV
                INTERRUPT_Default            , // [ 90] I3C1_ER
                INTERRUPT_Default            , // [ 91] OTG_HS
                INTERRUPT_Default            , // [ 92] ETH
                INTERRUPT_Default            , // [ 93] CORDIC
                INTERRUPT_Default            , // [ 94] GFXTIM
                INTERRUPT_Default            , // [ 95] DCMIPP
                INTERRUPT_Default            , // [ 96] Reserved
                INTERRUPT_Default            , // [ 97] Reserved
                INTERRUPT_Default            , // [ 98] DMA2D
                INTERRUPT_Default            , // [ 99] JPEG
                INTERRUPT_Default            , // [100] GFXMMU
                INTERRUPT_Default            , // [101] I3C1_WKUP
                INTERRUPT_Default            , // [102] MCE1
                INTERRUPT_Default            , // [103] MCE2
                INTERRUPT_Default            , // [104] MCE3
                INTERRUPT_Default            , // [105] XSPI1
                INTERRUPT_Default            , // [106] XSPI2
                INTERRUPT_Default            , // [107] FMC
                INTERRUPT_Default            , // [108] SDMMC1
                INTERRUPT_Default            , // [109] SDMMC2
                INTERRUPT_Default            , // [110] Reserved
                INTERRUPT_Default            , // [111] Reserved
                INTERRUPT_Default            , // [112] OTG_FS
                INTERRUPT_Default            , // [113] TIM12
                INTERRUPT_Default            , // [114] TIM13
                INTERRUPT_Default            , // [115] TIM14
                INTERRUPT_Default            , // [116] TIM15
                INTERRUPT_Default            , // [117] TIM16
                INTERRUPT_Default            , // [118] TIM17
                INTERRUPT_Default            , // [119] LPTIM1
                INTERRUPT_Default            , // [120] LPTIM2
                INTERRUPT_Default            , // [121] LPTIM3
                INTERRUPT_Default            , // [122] LPTIM4
                INTERRUPT_Default            , // [123] LPTIM5
                INTERRUPT_Default            , // [124] SPDIF_RX
                INTERRUPT_Default            , // [125] MDIOS
                INTERRUPT_Default            , // [126] ADF1_FLT0
                INTERRUPT_Default            , // [127] CRS
                INTERRUPT_Default            , // [128] UCPD1
                INTERRUPT_Default            , // [129] CEC
                INTERRUPT_Default            , // [130] PSSI
                INTERRUPT_Default            , // [131] LPUART1
                INTERRUPT_Default            , // [132] WAKEUP_PIN
                INTERRUPT_Default            , // [133] GPDMA1_Channel8
                INTERRUPT_Default            , // [134] GPDMA1_Channel9
                INTERRUPT_Default            , // [135] GPDMA1_Channel10
                INTERRUPT_Default            , // [136] GPDMA1_Channel11
                INTERRUPT_Default            , // [137] GPDMA1_Channel12
                INTERRUPT_Default            , // [138] GPDMA1_Channel13
                INTERRUPT_Default            , // [139] GPDMA1_Channel14
                INTERRUPT_Default            , // [140] GPDMA1_Channel15
                INTERRUPT_Default            , // [141] HPDMA1_Channel8
                INTERRUPT_Default            , // [142] HPDMA1_Channel9
                INTERRUPT_Default            , // [143] HPDMA1_Channel10
                INTERRUPT_Default            , // [144] HPDMA1_Channel11
                INTERRUPT_Default            , // [145] HPDMA1_Channel12
                INTERRUPT_Default            , // [146] HPDMA1_Channel13
                INTERRUPT_Default            , // [147] HPDMA1_Channel14
                INTERRUPT_Default            , // [148] HPDMA1_Channel15
                INTERRUPT_Default            , // [149] Reserved
                INTERRUPT_Default            , // [150] Reserved
                INTERRUPT_Default            , // [151] Reserved
                INTERRUPT_Default            , // [152] FDCAN1_IT0
                INTERRUPT_Default            , // [153] FDCAN1_IT1
                INTERRUPT_Default            , // [154] FDCAN2_IT0
                INTERRUPT_Default            , // [155] FDCAN2_IT1
            };
        #define INTERRUPT_BusFault extern void INTERRUPT_BusFault(void)
        #define INTERRUPT_Default extern void INTERRUPT_Default(void)
        #define INTERRUPT_Reset extern void INTERRUPT_Reset(void)
        #define INTERRUPT_USART3 extern void INTERRUPT_USART3(void)
        #define INTERRUPT_UsageFault extern void INTERRUPT_UsageFault(void)
        extern void
        STPY_init(void)
        {



            /////////////////////////////////// GPIOS ////////////////////////////////////



            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_WRITE__led_red B
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_WRITE__led_red 7
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_WRITE__led_yellow D
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_WRITE__led_yellow 13
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_WRITE__led_green D
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_WRITE__led_green 10
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__stlink_tx D
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__stlink_tx 8
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__stlink_rx D
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__stlink_rx 9
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__button C
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__button 13
            CMSIS_SET
            (
                RCC    , AHB4ENR,
                GPIOAEN, true   ,
                GPIOBEN, true   ,
                GPIOCEN, true   ,
                GPIODEN, true   ,
            );
            CMSIS_SET(GPIOB, ODR, OD7, false);
            CMSIS_SET
            (
                GPIOD, ODR  ,
                OD10 , false,
                OD13 , false,
            );
            CMSIS_SET(GPIOC, PUPDR, PUPD13, 0b01);
            CMSIS_WRITE
            (
                GPIO_AFRH, GPIOD->AFR[1],
                AFSEL8   , 7            ,
                AFSEL9   , 7            ,
            );
            CMSIS_SET(GPIOB, MODER, MODE7, 0b01);
            CMSIS_SET(GPIOC, MODER, MODE13, 0b00);
            CMSIS_SET
            (
                GPIOD , MODER,
                MODE8 , 0b10 ,
                MODE9 , 0b10 ,
                MODE10, 0b01 ,
                MODE13, 0b01 ,
            );



            ///////////////////////////////// Interrupts /////////////////////////////////



            static_assert(0 <= 0 && 0 < (1 << __NVIC_PRIO_BITS));
            NVIC->IPR[NVICInterrupt_USART3] = 0 << __NVIC_PRIO_BITS;
            CMSIS_SET
            (
                SCB        , SHCSR,
                BUSFAULTENA, true ,
                MEMFAULTENA, true ,
                USGFAULTENA, true ,
            );



            /////////////////////////////////// Flash ////////////////////////////////////



            CMSIS_SET
            (
                FLASH     , ACR ,
                LATENCY   , 0x7 ,
                WRHIGHFREQ, 0b11,
            );
            while (CMSIS_GET(FLASH, ACR, LATENCY) != 0x7);
            while (CMSIS_GET(FLASH, ACR, WRHIGHFREQ) != 0b11);



            //////////////////////////////// Power Supply ////////////////////////////////



            CMSIS_SET
            (
                PWR   , CSR2 ,
                SDEN  , false,
                LDOEN , true ,
                BYPASS, false,
            );
            CMSIS_SET(PWR, CSR4, VOS, 1);
            while (CMSIS_GET(PWR, SR1, ACTVOS) != 1);
            while (!CMSIS_GET(PWR, SR1, ACTVOSRDY));



            //////////////////////// High-Speed-Internal (48MHz) /////////////////////////



            CMSIS_SET(RCC, CR, HSI48ON, true);
            while (!CMSIS_GET(RCC, CR, HSI48RDY));



            ////////////////////////// Clock-Security-Internal ///////////////////////////



            CMSIS_SET(RCC, CR, CSION, true);
            while (!CMSIS_GET(RCC, CR, CSIRDY));



            ////////////////////////// Peripheral Clock Option ///////////////////////////



            CMSIS_SET(RCC, CCIPR1, CKPERSEL, 0b00);



            //////////////////////////////////// PLLs ////////////////////////////////////



            CMSIS_SET
            (
                RCC   , PLLCKSELR,
                PLLSRC, 0b00     ,
                DIVM1 , 8        ,
                DIVM2 , 6        ,
            );
            CMSIS_SET
            (
                RCC    , PLLCFGR,
                PLL1RGE, 0b11   ,
                PLL1PEN, true   ,
                PLL2RGE, 0b11   ,
                PLL2SEN, true   ,
            );
            CMSIS_SET
            (
                RCC , PLL1DIVR1,
                DIVN, 75 - 1   ,
                DIVP, 1 - 1    ,
            );
            CMSIS_SET(RCC, PLL2DIVR1, DIVN, 75 - 1);
            CMSIS_SET(RCC, PLL2DIVR2, DIVS, 4 - 1);
            CMSIS_SET
            (
                RCC   , CR  ,
                PLL1ON, true,
                PLL2ON, true,
            );
            while (!CMSIS_GET(RCC, CR, PLL1RDY));
            while (!CMSIS_GET(RCC, CR, PLL2RDY));



            //////////////////////// System Clock Generation Unit ////////////////////////



            CMSIS_SET(RCC, CDCFGR, CPRE, 0b0000);
            CMSIS_SET(RCC, BMCFGR, BMPRE, 0b1000);
            CMSIS_SET
            (
                RCC  , APBCFGR,
                PPRE1, 0b100  ,
                PPRE2, 0b100  ,
                PPRE4, 0b100  ,
                PPRE5, 0b100  ,
            );
            CMSIS_SET(RCC, CFGR, SW, 0b011);
            while (CMSIS_GET(RCC, CFGR, SWS) != 0b011);



            ////////////// USART2 / USART3 / UART4 / UART5 / UART7 / UART8 ///////////////



            #define STPY_USART2_KERNEL_SOURCE 0b000
            #define STPY_USART3_KERNEL_SOURCE 0b000
            #define STPY_UART4_KERNEL_SOURCE 0b000
            #define STPY_UART5_KERNEL_SOURCE 0b000
            #define STPY_UART7_KERNEL_SOURCE 0b000
            #define STPY_UART8_KERNEL_SOURCE 0b000
            #define STPY_USART3_BAUD_DIVIDER 150


        }
    #endif
    #undef STPY_IMPLEMENTATION
    #define STPY_0             (          0)
    #define STPY_CPU_CK        (600'000'000)
    #define STPY_HSI_CK        ( 64'000'000)
    #define STPY_HSI48_CK      ( 48'000'000)
    #define STPY_CSI_CK        (  4'000'000)
    #define STPY_PER_CK        ( 64'000'000)
    #define STPY_AXI_AHB_CK    (300'000'000)
    #define STPY_PLL1P_CK      (600'000'000)
    #define STPY_PLL2S_CK      (200'000'000)
    #define STPY_PLL1_VCO_FREQ (600'000'000)
    #define STPY_PLL2_VCO_FREQ (800'000'000)
    #define STPY_APB1_CK       (150'000'000)
    #define STPY_APB2_CK       (150'000'000)
    #define STPY_APB4_CK       (150'000'000)
    #define STPY_APB5_CK       (150'000'000)
#endif
#if TARGET_NAME_IS_SandboxNucleoH533RE
    #if STPY_IMPLEMENTATION
        enum NVICInterrupt : u32
        {
            NVICInterrupt_USART2 = USART2_IRQn,
        };
        static constexpr u32 NVICInterrupt_COUNT = 1;
        extern void INTERRUPT_BusFault(void);
        extern void INTERRUPT_Default(void);
        extern void INTERRUPT_Reset(void);
        extern void INTERRUPT_USART2(void);
        extern void INTERRUPT_UsageFault(void);
        void (* const INTERRUPT_VECTOR_TABLE[])(void) __attribute__((used, section(".INTERRUPT_VECTOR_TABLE"))) =
            {
                (void*) INITIAL_STACK_ADDRESS, // [-16] Initial Stack Address
                INTERRUPT_Reset              , // [-15] Reset
                INTERRUPT_Default            , // [-14] NonMaskableInt
                INTERRUPT_Default            , // [-13] HardFault
                INTERRUPT_Default            , // [-12] MemoryManagement
                INTERRUPT_BusFault           , // [-11] BusFault
                INTERRUPT_UsageFault         , // [-10] UsageFault
                INTERRUPT_Default            , // [ -9] SecureFault
                INTERRUPT_Default            , // [ -8] Reserved
                INTERRUPT_Default            , // [ -7] Reserved
                INTERRUPT_Default            , // [ -6] Reserved
                INTERRUPT_Default            , // [ -5] SVCall
                INTERRUPT_Default            , // [ -4] DebugMonitor
                INTERRUPT_Default            , // [ -3] Reserved
                INTERRUPT_Default            , // [ -2] PendSV
                INTERRUPT_Default            , // [ -1] SysTick
                INTERRUPT_Default            , // [  0] WWDG
                INTERRUPT_Default            , // [  1] PVD_AVD
                INTERRUPT_Default            , // [  2] RTC
                INTERRUPT_Default            , // [  3] RTC_S
                INTERRUPT_Default            , // [  4] TAMP
                INTERRUPT_Default            , // [  5] RAMCFG
                INTERRUPT_Default            , // [  6] FLASH
                INTERRUPT_Default            , // [  7] FLASH_S
                INTERRUPT_Default            , // [  8] GTZC
                INTERRUPT_Default            , // [  9] RCC
                INTERRUPT_Default            , // [ 10] RCC_S
                INTERRUPT_Default            , // [ 11] EXTI0
                INTERRUPT_Default            , // [ 12] EXTI1
                INTERRUPT_Default            , // [ 13] EXTI2
                INTERRUPT_Default            , // [ 14] EXTI3
                INTERRUPT_Default            , // [ 15] EXTI4
                INTERRUPT_Default            , // [ 16] EXTI5
                INTERRUPT_Default            , // [ 17] EXTI6
                INTERRUPT_Default            , // [ 18] EXTI7
                INTERRUPT_Default            , // [ 19] EXTI8
                INTERRUPT_Default            , // [ 20] EXTI9
                INTERRUPT_Default            , // [ 21] EXTI10
                INTERRUPT_Default            , // [ 22] EXTI11
                INTERRUPT_Default            , // [ 23] EXTI12
                INTERRUPT_Default            , // [ 24] EXTI13
                INTERRUPT_Default            , // [ 25] EXTI14
                INTERRUPT_Default            , // [ 26] EXTI15
                INTERRUPT_Default            , // [ 27] GPDMA1_Channel0
                INTERRUPT_Default            , // [ 28] GPDMA1_Channel1
                INTERRUPT_Default            , // [ 29] GPDMA1_Channel2
                INTERRUPT_Default            , // [ 30] GPDMA1_Channel3
                INTERRUPT_Default            , // [ 31] GPDMA1_Channel4
                INTERRUPT_Default            , // [ 32] GPDMA1_Channel5
                INTERRUPT_Default            , // [ 33] GPDMA1_Channel6
                INTERRUPT_Default            , // [ 34] GPDMA1_Channel7
                INTERRUPT_Default            , // [ 35] IWDG
                INTERRUPT_Default            , // [ 36] SAES
                INTERRUPT_Default            , // [ 37] ADC1
                INTERRUPT_Default            , // [ 38] DAC1
                INTERRUPT_Default            , // [ 39] FDCAN1_IT0
                INTERRUPT_Default            , // [ 40] FDCAN1_IT1
                INTERRUPT_Default            , // [ 41] TIM1_BRK
                INTERRUPT_Default            , // [ 42] TIM1_UP
                INTERRUPT_Default            , // [ 43] TIM1_TRG_COM
                INTERRUPT_Default            , // [ 44] TIM1_CC
                INTERRUPT_Default            , // [ 45] TIM2
                INTERRUPT_Default            , // [ 46] TIM3
                INTERRUPT_Default            , // [ 47] TIM4
                INTERRUPT_Default            , // [ 48] TIM5
                INTERRUPT_Default            , // [ 49] TIM6
                INTERRUPT_Default            , // [ 50] TIM7
                INTERRUPT_Default            , // [ 51] I2C1_EV
                INTERRUPT_Default            , // [ 52] I2C1_ER
                INTERRUPT_Default            , // [ 53] I2C2_EV
                INTERRUPT_Default            , // [ 54] I2C2_ER
                INTERRUPT_Default            , // [ 55] SPI1
                INTERRUPT_Default            , // [ 56] SPI2
                INTERRUPT_Default            , // [ 57] SPI3
                INTERRUPT_Default            , // [ 58] USART1
                INTERRUPT_USART2             , // [ 59] USART2
                INTERRUPT_Default            , // [ 60] USART3
                INTERRUPT_Default            , // [ 61] UART4
                INTERRUPT_Default            , // [ 62] UART5
                INTERRUPT_Default            , // [ 63] LPUART1
                INTERRUPT_Default            , // [ 64] LPTIM1
                INTERRUPT_Default            , // [ 65] TIM8_BRK
                INTERRUPT_Default            , // [ 66] TIM8_UP
                INTERRUPT_Default            , // [ 67] TIM8_TRG_COM
                INTERRUPT_Default            , // [ 68] TIM8_CC
                INTERRUPT_Default            , // [ 69] ADC2
                INTERRUPT_Default            , // [ 70] LPTIM2
                INTERRUPT_Default            , // [ 71] TIM15
                INTERRUPT_Default            , // [ 72] Reserved
                INTERRUPT_Default            , // [ 73] Reserved
                INTERRUPT_Default            , // [ 74] USB_DRD_FS
                INTERRUPT_Default            , // [ 75] CRS
                INTERRUPT_Default            , // [ 76] UCPD1
                INTERRUPT_Default            , // [ 77] FMC
                INTERRUPT_Default            , // [ 78] OCTOSPI1
                INTERRUPT_Default            , // [ 79] SDMMC1
                INTERRUPT_Default            , // [ 80] I2C3_EV
                INTERRUPT_Default            , // [ 81] I2C3_ER
                INTERRUPT_Default            , // [ 82] SPI4
                INTERRUPT_Default            , // [ 83] Reserved
                INTERRUPT_Default            , // [ 84] Reserved
                INTERRUPT_Default            , // [ 85] USART6
                INTERRUPT_Default            , // [ 86] Reserved
                INTERRUPT_Default            , // [ 87] Reserved
                INTERRUPT_Default            , // [ 88] Reserved
                INTERRUPT_Default            , // [ 89] Reserved
                INTERRUPT_Default            , // [ 90] GPDMA2_Channel0
                INTERRUPT_Default            , // [ 91] GPDMA2_Channel1
                INTERRUPT_Default            , // [ 92] GPDMA2_Channel2
                INTERRUPT_Default            , // [ 93] GPDMA2_Channel3
                INTERRUPT_Default            , // [ 94] GPDMA2_Channel4
                INTERRUPT_Default            , // [ 95] GPDMA2_Channel5
                INTERRUPT_Default            , // [ 96] GPDMA2_Channel6
                INTERRUPT_Default            , // [ 97] GPDMA2_Channel7
                INTERRUPT_Default            , // [ 98] Reserved
                INTERRUPT_Default            , // [ 99] Reserved
                INTERRUPT_Default            , // [100] Reserved
                INTERRUPT_Default            , // [101] Reserved
                INTERRUPT_Default            , // [102] Reserved
                INTERRUPT_Default            , // [103] FPU
                INTERRUPT_Default            , // [104] ICACHE
                INTERRUPT_Default            , // [105] DCACHE1
                INTERRUPT_Default            , // [106] Reserved
                INTERRUPT_Default            , // [107] Reserved
                INTERRUPT_Default            , // [108] DCMI_PSSI
                INTERRUPT_Default            , // [109] FDCAN2_IT0
                INTERRUPT_Default            , // [110] FDCAN2_IT1
                INTERRUPT_Default            , // [111] Reserved
                INTERRUPT_Default            , // [112] Reserved
                INTERRUPT_Default            , // [113] DTS
                INTERRUPT_Default            , // [114] RNG
                INTERRUPT_Default            , // [115] OTFDEC1
                INTERRUPT_Default            , // [116] AES
                INTERRUPT_Default            , // [117] HASH
                INTERRUPT_Default            , // [118] PKA
                INTERRUPT_Default            , // [119] CEC
                INTERRUPT_Default            , // [120] TIM12
                INTERRUPT_Default            , // [121] Reserved
                INTERRUPT_Default            , // [122] Reserved
                INTERRUPT_Default            , // [123] I3C1_EV
                INTERRUPT_Default            , // [124] I3C1_ER
                INTERRUPT_Default            , // [125] Reserved
                INTERRUPT_Default            , // [126] Reserved
                INTERRUPT_Default            , // [127] Reserved
                INTERRUPT_Default            , // [128] Reserved
                INTERRUPT_Default            , // [129] Reserved
                INTERRUPT_Default            , // [130] Reserved
                INTERRUPT_Default            , // [131] I3C2_EV
                INTERRUPT_Default            , // [132] I3C2_ER
            };
        #define INTERRUPT_BusFault extern void INTERRUPT_BusFault(void)
        #define INTERRUPT_Default extern void INTERRUPT_Default(void)
        #define INTERRUPT_Reset extern void INTERRUPT_Reset(void)
        #define INTERRUPT_USART2 extern void INTERRUPT_USART2(void)
        #define INTERRUPT_UsageFault extern void INTERRUPT_UsageFault(void)
        extern void
        STPY_init(void)
        {



            /////////////////////////////////// GPIOS ////////////////////////////////////



            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_WRITE__led_green A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_WRITE__led_green 5
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__stlink_tx A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__stlink_tx 2
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__stlink_rx A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__stlink_rx 3
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__button C
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__button 13
            CMSIS_SET
            (
                RCC    , AHB2ENR,
                GPIOAEN, true   ,
                GPIOCEN, true   ,
            );
            CMSIS_SET(GPIOA, ODR, OD5, false);
            CMSIS_SET(GPIOC, PUPDR, PUPD13, 0b01);
            CMSIS_WRITE
            (
                GPIO_AFRL, GPIOA->AFR[0],
                AFSEL2   , 7            ,
                AFSEL3   , 7            ,
            );
            CMSIS_SET
            (
                GPIOA, MODER,
                MODE2, 0b10 ,
                MODE3, 0b10 ,
                MODE5, 0b01 ,
            );
            CMSIS_SET(GPIOC, MODER, MODE13, 0b00);



            ///////////////////////////////// Interrupts /////////////////////////////////



            static_assert(0 <= 0 && 0 < (1 << __NVIC_PRIO_BITS));
            NVIC->IPR[NVICInterrupt_USART2] = 0 << __NVIC_PRIO_BITS;
            CMSIS_SET
            (
                SCB        , SHCSR,
                BUSFAULTENA, true ,
                MEMFAULTENA, true ,
                USGFAULTENA, true ,
            );



            /////////////////////////////////// Flash ////////////////////////////////////



            CMSIS_SET
            (
                FLASH     , ACR ,
                LATENCY   , 5   ,
                WRHIGHFREQ, 0b10,
            );
            while (CMSIS_GET(FLASH, ACR, LATENCY) != 5);
            while (CMSIS_GET(FLASH, ACR, WRHIGHFREQ) != 0b10);



            //////////////////////////////// Power Supply ////////////////////////////////



            CMSIS_SET
            (
                PWR   , SCCR ,
                LDOEN , true ,
                BYPASS, false,
            );
            CMSIS_SET(PWR, VOSCR, VOS, 0b11);
            while (CMSIS_GET(PWR, VOSSR, ACTVOS) != 0b11);
            while (!CMSIS_GET(PWR, VOSSR, ACTVOSRDY));



            //////////////////////// High-Speed-Internal (48MHz) /////////////////////////



            CMSIS_SET(RCC, CR, HSI48ON, true);
            while (!CMSIS_GET(RCC, CR, HSI48RDY));



            ////////////////////////// Clock-Security-Internal ///////////////////////////



            CMSIS_SET(RCC, CR, CSION, true);
            while (!CMSIS_GET(RCC, CR, CSIRDY));



            //////////////////////////////////// PLLs ////////////////////////////////////



            CMSIS_SET
            (
                RCC    , PLL1CFGR,
                PLL1SRC, 0b01    ,
                PLL1M  , 8       ,
                PLL1RGE, 2       ,
                PLL1PEN, true    ,
            );
            CMSIS_SET
            (
                RCC  , PLL1DIVR,
                PLL1N, 125 - 1 ,
                PLL1P, 2 - 1   ,
            );
            CMSIS_SET(RCC, CR, PLL1ON, true);
            while (!CMSIS_GET(RCC, CR, PLL1RDY));



            //////////////////////// System Clock Generation Unit ////////////////////////



            CMSIS_SET
            (
                RCC  , CFGR2 ,
                HPRE , 0b0000,
                PPRE1, 0b000 ,
                PPRE2, 0b000 ,
                PPRE3, 0b000 ,
            );
            CMSIS_SET(RCC, CFGR1, SW, 0b011);
            while (CMSIS_GET(RCC, CFGR1, SWS) != 0b011);



            /////////////////////////////////// USART2 ///////////////////////////////////



            #define STPY_USART2_KERNEL_SOURCE 0b000
            #define STPY_USART2_BAUD_DIVIDER 250


        }
    #endif
    #undef STPY_IMPLEMENTATION
    #define STPY_0             (          0)
    #define STPY_CPU_CK        (250'000'000)
    #define STPY_HSI_CK        ( 32'000'000)
    #define STPY_HSI48_CK      ( 48'000'000)
    #define STPY_CSI_CK        (  4'000'000)
    #define STPY_AXI_AHB_CK    (250'000'000)
    #define STPY_PLL1P_CK      (250'000'000)
    #define STPY_PLL1_VCO_FREQ (500'000'000)
    #define STPY_APB1_CK       (250'000'000)
    #define STPY_APB2_CK       (250'000'000)
    #define STPY_APB3_CK       (250'000'000)
#endif
#if TARGET_NAME_IS_DemoI2C
    #if STPY_IMPLEMENTATION
        enum NVICInterrupt : u32
        {
            NVICInterrupt_USART2  = USART2_IRQn,
            NVICInterrupt_I2C1_EV = I2C1_EV_IRQn,
            NVICInterrupt_I2C1_ER = I2C1_ER_IRQn,
        };
        static constexpr u32 NVICInterrupt_COUNT = 3;
        extern void INTERRUPT_BusFault(void);
        extern void INTERRUPT_Default(void);
        extern void INTERRUPT_I2C1_ER(void);
        extern void INTERRUPT_I2C1_EV(void);
        extern void INTERRUPT_Reset(void);
        extern void INTERRUPT_USART2(void);
        extern void INTERRUPT_UsageFault(void);
        void (* const INTERRUPT_VECTOR_TABLE[])(void) __attribute__((used, section(".INTERRUPT_VECTOR_TABLE"))) =
            {
                (void*) INITIAL_STACK_ADDRESS, // [-16] Initial Stack Address
                INTERRUPT_Reset              , // [-15] Reset
                INTERRUPT_Default            , // [-14] NonMaskableInt
                INTERRUPT_Default            , // [-13] HardFault
                INTERRUPT_Default            , // [-12] MemoryManagement
                INTERRUPT_BusFault           , // [-11] BusFault
                INTERRUPT_UsageFault         , // [-10] UsageFault
                INTERRUPT_Default            , // [ -9] SecureFault
                INTERRUPT_Default            , // [ -8] Reserved
                INTERRUPT_Default            , // [ -7] Reserved
                INTERRUPT_Default            , // [ -6] Reserved
                INTERRUPT_Default            , // [ -5] SVCall
                INTERRUPT_Default            , // [ -4] DebugMonitor
                INTERRUPT_Default            , // [ -3] Reserved
                INTERRUPT_Default            , // [ -2] PendSV
                INTERRUPT_Default            , // [ -1] SysTick
                INTERRUPT_Default            , // [  0] WWDG
                INTERRUPT_Default            , // [  1] PVD_AVD
                INTERRUPT_Default            , // [  2] RTC
                INTERRUPT_Default            , // [  3] RTC_S
                INTERRUPT_Default            , // [  4] TAMP
                INTERRUPT_Default            , // [  5] RAMCFG
                INTERRUPT_Default            , // [  6] FLASH
                INTERRUPT_Default            , // [  7] FLASH_S
                INTERRUPT_Default            , // [  8] GTZC
                INTERRUPT_Default            , // [  9] RCC
                INTERRUPT_Default            , // [ 10] RCC_S
                INTERRUPT_Default            , // [ 11] EXTI0
                INTERRUPT_Default            , // [ 12] EXTI1
                INTERRUPT_Default            , // [ 13] EXTI2
                INTERRUPT_Default            , // [ 14] EXTI3
                INTERRUPT_Default            , // [ 15] EXTI4
                INTERRUPT_Default            , // [ 16] EXTI5
                INTERRUPT_Default            , // [ 17] EXTI6
                INTERRUPT_Default            , // [ 18] EXTI7
                INTERRUPT_Default            , // [ 19] EXTI8
                INTERRUPT_Default            , // [ 20] EXTI9
                INTERRUPT_Default            , // [ 21] EXTI10
                INTERRUPT_Default            , // [ 22] EXTI11
                INTERRUPT_Default            , // [ 23] EXTI12
                INTERRUPT_Default            , // [ 24] EXTI13
                INTERRUPT_Default            , // [ 25] EXTI14
                INTERRUPT_Default            , // [ 26] EXTI15
                INTERRUPT_Default            , // [ 27] GPDMA1_Channel0
                INTERRUPT_Default            , // [ 28] GPDMA1_Channel1
                INTERRUPT_Default            , // [ 29] GPDMA1_Channel2
                INTERRUPT_Default            , // [ 30] GPDMA1_Channel3
                INTERRUPT_Default            , // [ 31] GPDMA1_Channel4
                INTERRUPT_Default            , // [ 32] GPDMA1_Channel5
                INTERRUPT_Default            , // [ 33] GPDMA1_Channel6
                INTERRUPT_Default            , // [ 34] GPDMA1_Channel7
                INTERRUPT_Default            , // [ 35] IWDG
                INTERRUPT_Default            , // [ 36] SAES
                INTERRUPT_Default            , // [ 37] ADC1
                INTERRUPT_Default            , // [ 38] DAC1
                INTERRUPT_Default            , // [ 39] FDCAN1_IT0
                INTERRUPT_Default            , // [ 40] FDCAN1_IT1
                INTERRUPT_Default            , // [ 41] TIM1_BRK
                INTERRUPT_Default            , // [ 42] TIM1_UP
                INTERRUPT_Default            , // [ 43] TIM1_TRG_COM
                INTERRUPT_Default            , // [ 44] TIM1_CC
                INTERRUPT_Default            , // [ 45] TIM2
                INTERRUPT_Default            , // [ 46] TIM3
                INTERRUPT_Default            , // [ 47] TIM4
                INTERRUPT_Default            , // [ 48] TIM5
                INTERRUPT_Default            , // [ 49] TIM6
                INTERRUPT_Default            , // [ 50] TIM7
                INTERRUPT_I2C1_EV            , // [ 51] I2C1_EV
                INTERRUPT_I2C1_ER            , // [ 52] I2C1_ER
                INTERRUPT_Default            , // [ 53] I2C2_EV
                INTERRUPT_Default            , // [ 54] I2C2_ER
                INTERRUPT_Default            , // [ 55] SPI1
                INTERRUPT_Default            , // [ 56] SPI2
                INTERRUPT_Default            , // [ 57] SPI3
                INTERRUPT_Default            , // [ 58] USART1
                INTERRUPT_USART2             , // [ 59] USART2
                INTERRUPT_Default            , // [ 60] USART3
                INTERRUPT_Default            , // [ 61] UART4
                INTERRUPT_Default            , // [ 62] UART5
                INTERRUPT_Default            , // [ 63] LPUART1
                INTERRUPT_Default            , // [ 64] LPTIM1
                INTERRUPT_Default            , // [ 65] TIM8_BRK
                INTERRUPT_Default            , // [ 66] TIM8_UP
                INTERRUPT_Default            , // [ 67] TIM8_TRG_COM
                INTERRUPT_Default            , // [ 68] TIM8_CC
                INTERRUPT_Default            , // [ 69] ADC2
                INTERRUPT_Default            , // [ 70] LPTIM2
                INTERRUPT_Default            , // [ 71] TIM15
                INTERRUPT_Default            , // [ 72] Reserved
                INTERRUPT_Default            , // [ 73] Reserved
                INTERRUPT_Default            , // [ 74] USB_DRD_FS
                INTERRUPT_Default            , // [ 75] CRS
                INTERRUPT_Default            , // [ 76] UCPD1
                INTERRUPT_Default            , // [ 77] FMC
                INTERRUPT_Default            , // [ 78] OCTOSPI1
                INTERRUPT_Default            , // [ 79] SDMMC1
                INTERRUPT_Default            , // [ 80] I2C3_EV
                INTERRUPT_Default            , // [ 81] I2C3_ER
                INTERRUPT_Default            , // [ 82] SPI4
                INTERRUPT_Default            , // [ 83] Reserved
                INTERRUPT_Default            , // [ 84] Reserved
                INTERRUPT_Default            , // [ 85] USART6
                INTERRUPT_Default            , // [ 86] Reserved
                INTERRUPT_Default            , // [ 87] Reserved
                INTERRUPT_Default            , // [ 88] Reserved
                INTERRUPT_Default            , // [ 89] Reserved
                INTERRUPT_Default            , // [ 90] GPDMA2_Channel0
                INTERRUPT_Default            , // [ 91] GPDMA2_Channel1
                INTERRUPT_Default            , // [ 92] GPDMA2_Channel2
                INTERRUPT_Default            , // [ 93] GPDMA2_Channel3
                INTERRUPT_Default            , // [ 94] GPDMA2_Channel4
                INTERRUPT_Default            , // [ 95] GPDMA2_Channel5
                INTERRUPT_Default            , // [ 96] GPDMA2_Channel6
                INTERRUPT_Default            , // [ 97] GPDMA2_Channel7
                INTERRUPT_Default            , // [ 98] Reserved
                INTERRUPT_Default            , // [ 99] Reserved
                INTERRUPT_Default            , // [100] Reserved
                INTERRUPT_Default            , // [101] Reserved
                INTERRUPT_Default            , // [102] Reserved
                INTERRUPT_Default            , // [103] FPU
                INTERRUPT_Default            , // [104] ICACHE
                INTERRUPT_Default            , // [105] DCACHE1
                INTERRUPT_Default            , // [106] Reserved
                INTERRUPT_Default            , // [107] Reserved
                INTERRUPT_Default            , // [108] DCMI_PSSI
                INTERRUPT_Default            , // [109] FDCAN2_IT0
                INTERRUPT_Default            , // [110] FDCAN2_IT1
                INTERRUPT_Default            , // [111] Reserved
                INTERRUPT_Default            , // [112] Reserved
                INTERRUPT_Default            , // [113] DTS
                INTERRUPT_Default            , // [114] RNG
                INTERRUPT_Default            , // [115] OTFDEC1
                INTERRUPT_Default            , // [116] AES
                INTERRUPT_Default            , // [117] HASH
                INTERRUPT_Default            , // [118] PKA
                INTERRUPT_Default            , // [119] CEC
                INTERRUPT_Default            , // [120] TIM12
                INTERRUPT_Default            , // [121] Reserved
                INTERRUPT_Default            , // [122] Reserved
                INTERRUPT_Default            , // [123] I3C1_EV
                INTERRUPT_Default            , // [124] I3C1_ER
                INTERRUPT_Default            , // [125] Reserved
                INTERRUPT_Default            , // [126] Reserved
                INTERRUPT_Default            , // [127] Reserved
                INTERRUPT_Default            , // [128] Reserved
                INTERRUPT_Default            , // [129] Reserved
                INTERRUPT_Default            , // [130] Reserved
                INTERRUPT_Default            , // [131] I3C2_EV
                INTERRUPT_Default            , // [132] I3C2_ER
            };
        #define INTERRUPT_BusFault extern void INTERRUPT_BusFault(void)
        #define INTERRUPT_Default extern void INTERRUPT_Default(void)
        #define INTERRUPT_I2C1_ER extern void INTERRUPT_I2C1_ER(void)
        #define INTERRUPT_I2C1_EV extern void INTERRUPT_I2C1_EV(void)
        #define INTERRUPT_Reset extern void INTERRUPT_Reset(void)
        #define INTERRUPT_USART2 extern void INTERRUPT_USART2(void)
        #define INTERRUPT_UsageFault extern void INTERRUPT_UsageFault(void)
        extern void
        STPY_init(void)
        {



            /////////////////////////////////// GPIOS ////////////////////////////////////



            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_WRITE__led_green A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_WRITE__led_green 5
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__stlink_tx A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__stlink_tx 2
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__stlink_rx A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__stlink_rx 3
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__button C
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__button 13
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__i2c1_scl B
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__i2c1_scl 6
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__i2c1_sda B
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__i2c1_sda 7
            CMSIS_SET
            (
                RCC    , AHB2ENR,
                GPIOAEN, true   ,
                GPIOBEN, true   ,
                GPIOCEN, true   ,
            );
            CMSIS_SET
            (
                GPIOB, OTYPER,
                OT6  , true  ,
                OT7  , true  ,
            );
            CMSIS_SET(GPIOA, ODR, OD5, false);
            CMSIS_SET
            (
                GPIOB, PUPDR,
                PUPD6, 0b01 ,
                PUPD7, 0b01 ,
            );
            CMSIS_SET(GPIOC, PUPDR, PUPD13, 0b01);
            CMSIS_WRITE
            (
                GPIO_AFRL, GPIOA->AFR[0],
                AFSEL2   , 7            ,
                AFSEL3   , 7            ,
            );
            CMSIS_WRITE
            (
                GPIO_AFRL, GPIOB->AFR[0],
                AFSEL6   , 4            ,
                AFSEL7   , 4            ,
            );
            CMSIS_SET
            (
                GPIOA, MODER,
                MODE2, 0b10 ,
                MODE3, 0b10 ,
                MODE5, 0b01 ,
            );
            CMSIS_SET
            (
                GPIOB, MODER,
                MODE6, 0b10 ,
                MODE7, 0b10 ,
            );
            CMSIS_SET(GPIOC, MODER, MODE13, 0b00);



            ///////////////////////////////// Interrupts /////////////////////////////////



            static_assert(0 <= 0 && 0 < (1 << __NVIC_PRIO_BITS));
            NVIC->IPR[NVICInterrupt_USART2] = 0 << __NVIC_PRIO_BITS;
            static_assert(0 <= 1 && 1 < (1 << __NVIC_PRIO_BITS));
            NVIC->IPR[NVICInterrupt_I2C1_EV] = 1 << __NVIC_PRIO_BITS;
            static_assert(0 <= 1 && 1 < (1 << __NVIC_PRIO_BITS));
            NVIC->IPR[NVICInterrupt_I2C1_ER] = 1 << __NVIC_PRIO_BITS;
            CMSIS_SET
            (
                SCB        , SHCSR,
                BUSFAULTENA, true ,
                MEMFAULTENA, true ,
                USGFAULTENA, true ,
            );



            /////////////////////////////////// Flash ////////////////////////////////////



            CMSIS_SET
            (
                FLASH     , ACR ,
                LATENCY   , 5   ,
                WRHIGHFREQ, 0b10,
            );
            while (CMSIS_GET(FLASH, ACR, LATENCY) != 5);
            while (CMSIS_GET(FLASH, ACR, WRHIGHFREQ) != 0b10);



            //////////////////////////////// Power Supply ////////////////////////////////



            CMSIS_SET
            (
                PWR   , SCCR ,
                LDOEN , true ,
                BYPASS, false,
            );
            CMSIS_SET(PWR, VOSCR, VOS, 0b11);
            while (CMSIS_GET(PWR, VOSSR, ACTVOS) != 0b11);
            while (!CMSIS_GET(PWR, VOSSR, ACTVOSRDY));



            //////////////////////// High-Speed-Internal (48MHz) /////////////////////////



            CMSIS_SET(RCC, CR, HSI48ON, true);
            while (!CMSIS_GET(RCC, CR, HSI48RDY));



            ////////////////////////// Clock-Security-Internal ///////////////////////////



            CMSIS_SET(RCC, CR, CSION, true);
            while (!CMSIS_GET(RCC, CR, CSIRDY));



            //////////////////////////////////// PLLs ////////////////////////////////////



            CMSIS_SET
            (
                RCC    , PLL1CFGR,
                PLL1SRC, 0b01    ,
                PLL1M  , 8       ,
                PLL1RGE, 2       ,
                PLL1PEN, true    ,
            );
            CMSIS_SET
            (
                RCC  , PLL1DIVR,
                PLL1N, 125 - 1 ,
                PLL1P, 2 - 1   ,
            );
            CMSIS_SET(RCC, CR, PLL1ON, true);
            while (!CMSIS_GET(RCC, CR, PLL1RDY));



            //////////////////////// System Clock Generation Unit ////////////////////////



            CMSIS_SET
            (
                RCC  , CFGR2 ,
                HPRE , 0b0000,
                PPRE1, 0b000 ,
                PPRE2, 0b000 ,
                PPRE3, 0b000 ,
            );
            CMSIS_SET(RCC, CFGR1, SW, 0b011);
            while (CMSIS_GET(RCC, CFGR1, SWS) != 0b011);



            /////////////////////////////////// USART2 ///////////////////////////////////



            #define STPY_USART2_KERNEL_SOURCE 0b000
            #define STPY_USART2_BAUD_DIVIDER 250



            //////////////////////////////////// I2C1 ////////////////////////////////////



            #define STPY_I2C1_KERNEL_SOURCE 0b11
            #define STPY_I2C1_PRESC 15
            #define STPY_I2C1_SCLH 250
            #define STPY_I2C1_SCLL 250


        }
    #endif
    #undef STPY_IMPLEMENTATION
    #define STPY_0             (          0)
    #define STPY_CPU_CK        (250'000'000)
    #define STPY_HSI_CK        ( 32'000'000)
    #define STPY_HSI48_CK      ( 48'000'000)
    #define STPY_CSI_CK        (  4'000'000)
    #define STPY_AXI_AHB_CK    (250'000'000)
    #define STPY_PLL1P_CK      (250'000'000)
    #define STPY_PLL1_VCO_FREQ (500'000'000)
    #define STPY_APB1_CK       (250'000'000)
    #define STPY_APB2_CK       (250'000'000)
    #define STPY_APB3_CK       (250'000'000)
#endif
#if TARGET_NAME_IS_DemoTimer
    #if STPY_IMPLEMENTATION
        enum NVICInterrupt : u32
        {
            NVICInterrupt_USART2  = USART2_IRQn,
            NVICInterrupt_TIM1_UP = TIM1_UP_IRQn,
        };
        static constexpr u32 NVICInterrupt_COUNT = 2;
        extern void INTERRUPT_BusFault(void);
        extern void INTERRUPT_Default(void);
        extern void INTERRUPT_Reset(void);
        extern void INTERRUPT_TIM1_UP(void);
        extern void INTERRUPT_USART2(void);
        extern void INTERRUPT_UsageFault(void);
        void (* const INTERRUPT_VECTOR_TABLE[])(void) __attribute__((used, section(".INTERRUPT_VECTOR_TABLE"))) =
            {
                (void*) INITIAL_STACK_ADDRESS, // [-16] Initial Stack Address
                INTERRUPT_Reset              , // [-15] Reset
                INTERRUPT_Default            , // [-14] NonMaskableInt
                INTERRUPT_Default            , // [-13] HardFault
                INTERRUPT_Default            , // [-12] MemoryManagement
                INTERRUPT_BusFault           , // [-11] BusFault
                INTERRUPT_UsageFault         , // [-10] UsageFault
                INTERRUPT_Default            , // [ -9] SecureFault
                INTERRUPT_Default            , // [ -8] Reserved
                INTERRUPT_Default            , // [ -7] Reserved
                INTERRUPT_Default            , // [ -6] Reserved
                INTERRUPT_Default            , // [ -5] SVCall
                INTERRUPT_Default            , // [ -4] DebugMonitor
                INTERRUPT_Default            , // [ -3] Reserved
                INTERRUPT_Default            , // [ -2] PendSV
                INTERRUPT_Default            , // [ -1] SysTick
                INTERRUPT_Default            , // [  0] WWDG
                INTERRUPT_Default            , // [  1] PVD_AVD
                INTERRUPT_Default            , // [  2] RTC
                INTERRUPT_Default            , // [  3] RTC_S
                INTERRUPT_Default            , // [  4] TAMP
                INTERRUPT_Default            , // [  5] RAMCFG
                INTERRUPT_Default            , // [  6] FLASH
                INTERRUPT_Default            , // [  7] FLASH_S
                INTERRUPT_Default            , // [  8] GTZC
                INTERRUPT_Default            , // [  9] RCC
                INTERRUPT_Default            , // [ 10] RCC_S
                INTERRUPT_Default            , // [ 11] EXTI0
                INTERRUPT_Default            , // [ 12] EXTI1
                INTERRUPT_Default            , // [ 13] EXTI2
                INTERRUPT_Default            , // [ 14] EXTI3
                INTERRUPT_Default            , // [ 15] EXTI4
                INTERRUPT_Default            , // [ 16] EXTI5
                INTERRUPT_Default            , // [ 17] EXTI6
                INTERRUPT_Default            , // [ 18] EXTI7
                INTERRUPT_Default            , // [ 19] EXTI8
                INTERRUPT_Default            , // [ 20] EXTI9
                INTERRUPT_Default            , // [ 21] EXTI10
                INTERRUPT_Default            , // [ 22] EXTI11
                INTERRUPT_Default            , // [ 23] EXTI12
                INTERRUPT_Default            , // [ 24] EXTI13
                INTERRUPT_Default            , // [ 25] EXTI14
                INTERRUPT_Default            , // [ 26] EXTI15
                INTERRUPT_Default            , // [ 27] GPDMA1_Channel0
                INTERRUPT_Default            , // [ 28] GPDMA1_Channel1
                INTERRUPT_Default            , // [ 29] GPDMA1_Channel2
                INTERRUPT_Default            , // [ 30] GPDMA1_Channel3
                INTERRUPT_Default            , // [ 31] GPDMA1_Channel4
                INTERRUPT_Default            , // [ 32] GPDMA1_Channel5
                INTERRUPT_Default            , // [ 33] GPDMA1_Channel6
                INTERRUPT_Default            , // [ 34] GPDMA1_Channel7
                INTERRUPT_Default            , // [ 35] IWDG
                INTERRUPT_Default            , // [ 36] SAES
                INTERRUPT_Default            , // [ 37] ADC1
                INTERRUPT_Default            , // [ 38] DAC1
                INTERRUPT_Default            , // [ 39] FDCAN1_IT0
                INTERRUPT_Default            , // [ 40] FDCAN1_IT1
                INTERRUPT_Default            , // [ 41] TIM1_BRK
                INTERRUPT_TIM1_UP            , // [ 42] TIM1_UP
                INTERRUPT_Default            , // [ 43] TIM1_TRG_COM
                INTERRUPT_Default            , // [ 44] TIM1_CC
                INTERRUPT_Default            , // [ 45] TIM2
                INTERRUPT_Default            , // [ 46] TIM3
                INTERRUPT_Default            , // [ 47] TIM4
                INTERRUPT_Default            , // [ 48] TIM5
                INTERRUPT_Default            , // [ 49] TIM6
                INTERRUPT_Default            , // [ 50] TIM7
                INTERRUPT_Default            , // [ 51] I2C1_EV
                INTERRUPT_Default            , // [ 52] I2C1_ER
                INTERRUPT_Default            , // [ 53] I2C2_EV
                INTERRUPT_Default            , // [ 54] I2C2_ER
                INTERRUPT_Default            , // [ 55] SPI1
                INTERRUPT_Default            , // [ 56] SPI2
                INTERRUPT_Default            , // [ 57] SPI3
                INTERRUPT_Default            , // [ 58] USART1
                INTERRUPT_USART2             , // [ 59] USART2
                INTERRUPT_Default            , // [ 60] USART3
                INTERRUPT_Default            , // [ 61] UART4
                INTERRUPT_Default            , // [ 62] UART5
                INTERRUPT_Default            , // [ 63] LPUART1
                INTERRUPT_Default            , // [ 64] LPTIM1
                INTERRUPT_Default            , // [ 65] TIM8_BRK
                INTERRUPT_Default            , // [ 66] TIM8_UP
                INTERRUPT_Default            , // [ 67] TIM8_TRG_COM
                INTERRUPT_Default            , // [ 68] TIM8_CC
                INTERRUPT_Default            , // [ 69] ADC2
                INTERRUPT_Default            , // [ 70] LPTIM2
                INTERRUPT_Default            , // [ 71] TIM15
                INTERRUPT_Default            , // [ 72] Reserved
                INTERRUPT_Default            , // [ 73] Reserved
                INTERRUPT_Default            , // [ 74] USB_DRD_FS
                INTERRUPT_Default            , // [ 75] CRS
                INTERRUPT_Default            , // [ 76] UCPD1
                INTERRUPT_Default            , // [ 77] FMC
                INTERRUPT_Default            , // [ 78] OCTOSPI1
                INTERRUPT_Default            , // [ 79] SDMMC1
                INTERRUPT_Default            , // [ 80] I2C3_EV
                INTERRUPT_Default            , // [ 81] I2C3_ER
                INTERRUPT_Default            , // [ 82] SPI4
                INTERRUPT_Default            , // [ 83] Reserved
                INTERRUPT_Default            , // [ 84] Reserved
                INTERRUPT_Default            , // [ 85] USART6
                INTERRUPT_Default            , // [ 86] Reserved
                INTERRUPT_Default            , // [ 87] Reserved
                INTERRUPT_Default            , // [ 88] Reserved
                INTERRUPT_Default            , // [ 89] Reserved
                INTERRUPT_Default            , // [ 90] GPDMA2_Channel0
                INTERRUPT_Default            , // [ 91] GPDMA2_Channel1
                INTERRUPT_Default            , // [ 92] GPDMA2_Channel2
                INTERRUPT_Default            , // [ 93] GPDMA2_Channel3
                INTERRUPT_Default            , // [ 94] GPDMA2_Channel4
                INTERRUPT_Default            , // [ 95] GPDMA2_Channel5
                INTERRUPT_Default            , // [ 96] GPDMA2_Channel6
                INTERRUPT_Default            , // [ 97] GPDMA2_Channel7
                INTERRUPT_Default            , // [ 98] Reserved
                INTERRUPT_Default            , // [ 99] Reserved
                INTERRUPT_Default            , // [100] Reserved
                INTERRUPT_Default            , // [101] Reserved
                INTERRUPT_Default            , // [102] Reserved
                INTERRUPT_Default            , // [103] FPU
                INTERRUPT_Default            , // [104] ICACHE
                INTERRUPT_Default            , // [105] DCACHE1
                INTERRUPT_Default            , // [106] Reserved
                INTERRUPT_Default            , // [107] Reserved
                INTERRUPT_Default            , // [108] DCMI_PSSI
                INTERRUPT_Default            , // [109] FDCAN2_IT0
                INTERRUPT_Default            , // [110] FDCAN2_IT1
                INTERRUPT_Default            , // [111] Reserved
                INTERRUPT_Default            , // [112] Reserved
                INTERRUPT_Default            , // [113] DTS
                INTERRUPT_Default            , // [114] RNG
                INTERRUPT_Default            , // [115] OTFDEC1
                INTERRUPT_Default            , // [116] AES
                INTERRUPT_Default            , // [117] HASH
                INTERRUPT_Default            , // [118] PKA
                INTERRUPT_Default            , // [119] CEC
                INTERRUPT_Default            , // [120] TIM12
                INTERRUPT_Default            , // [121] Reserved
                INTERRUPT_Default            , // [122] Reserved
                INTERRUPT_Default            , // [123] I3C1_EV
                INTERRUPT_Default            , // [124] I3C1_ER
                INTERRUPT_Default            , // [125] Reserved
                INTERRUPT_Default            , // [126] Reserved
                INTERRUPT_Default            , // [127] Reserved
                INTERRUPT_Default            , // [128] Reserved
                INTERRUPT_Default            , // [129] Reserved
                INTERRUPT_Default            , // [130] Reserved
                INTERRUPT_Default            , // [131] I3C2_EV
                INTERRUPT_Default            , // [132] I3C2_ER
            };
        #define INTERRUPT_BusFault extern void INTERRUPT_BusFault(void)
        #define INTERRUPT_Default extern void INTERRUPT_Default(void)
        #define INTERRUPT_Reset extern void INTERRUPT_Reset(void)
        #define INTERRUPT_TIM1_UP extern void INTERRUPT_TIM1_UP(void)
        #define INTERRUPT_USART2 extern void INTERRUPT_USART2(void)
        #define INTERRUPT_UsageFault extern void INTERRUPT_UsageFault(void)
        extern void
        STPY_init(void)
        {



            /////////////////////////////////// GPIOS ////////////////////////////////////



            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_WRITE__led_green A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_WRITE__led_green 5
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__stlink_tx A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__stlink_tx 2
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__stlink_rx A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__stlink_rx 3
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__button C
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__button 13
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__i2c1_scl B
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__i2c1_scl 6
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__i2c1_sda B
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__i2c1_sda 7
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__OC1 A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__OC1 8
            #define __MACRO_OVERLOAD___PORT_FOR_GPIO_READ__OC1N A
            #define __MACRO_OVERLOAD___NUMBER_FOR_GPIO_READ__OC1N 7
            CMSIS_SET
            (
                RCC    , AHB2ENR,
                GPIOAEN, true   ,
                GPIOBEN, true   ,
                GPIOCEN, true   ,
            );
            CMSIS_SET
            (
                GPIOB, OTYPER,
                OT6  , true  ,
                OT7  , true  ,
            );
            CMSIS_SET(GPIOA, ODR, OD5, false);
            CMSIS_SET
            (
                GPIOB, PUPDR,
                PUPD6, 0b01 ,
                PUPD7, 0b01 ,
            );
            CMSIS_SET(GPIOC, PUPDR, PUPD13, 0b01);
            CMSIS_WRITE
            (
                GPIO_AFRL, GPIOA->AFR[0],
                AFSEL2   , 7            ,
                AFSEL3   , 7            ,
                AFSEL7   , 1            ,
            );
            CMSIS_WRITE(GPIO_AFRH, GPIOA->AFR[1], AFSEL8, 1);
            CMSIS_WRITE
            (
                GPIO_AFRL, GPIOB->AFR[0],
                AFSEL6   , 4            ,
                AFSEL7   , 4            ,
            );
            CMSIS_SET
            (
                GPIOA, MODER,
                MODE2, 0b10 ,
                MODE3, 0b10 ,
                MODE5, 0b01 ,
                MODE7, 0b10 ,
                MODE8, 0b10 ,
            );
            CMSIS_SET
            (
                GPIOB, MODER,
                MODE6, 0b10 ,
                MODE7, 0b10 ,
            );
            CMSIS_SET(GPIOC, MODER, MODE13, 0b00);



            ///////////////////////////////// Interrupts /////////////////////////////////



            static_assert(0 <= 0 && 0 < (1 << __NVIC_PRIO_BITS));
            NVIC->IPR[NVICInterrupt_USART2] = 0 << __NVIC_PRIO_BITS;
            static_assert(0 <= 1 && 1 < (1 << __NVIC_PRIO_BITS));
            NVIC->IPR[NVICInterrupt_TIM1_UP] = 1 << __NVIC_PRIO_BITS;
            CMSIS_SET
            (
                SCB        , SHCSR,
                BUSFAULTENA, true ,
                MEMFAULTENA, true ,
                USGFAULTENA, true ,
            );



            /////////////////////////////////// Flash ////////////////////////////////////



            CMSIS_SET
            (
                FLASH     , ACR ,
                LATENCY   , 5   ,
                WRHIGHFREQ, 0b10,
            );
            while (CMSIS_GET(FLASH, ACR, LATENCY) != 5);
            while (CMSIS_GET(FLASH, ACR, WRHIGHFREQ) != 0b10);



            //////////////////////////////// Power Supply ////////////////////////////////



            CMSIS_SET
            (
                PWR   , SCCR ,
                LDOEN , true ,
                BYPASS, false,
            );
            CMSIS_SET(PWR, VOSCR, VOS, 0b11);
            while (CMSIS_GET(PWR, VOSSR, ACTVOS) != 0b11);
            while (!CMSIS_GET(PWR, VOSSR, ACTVOSRDY));



            //////////////////////// High-Speed-Internal (48MHz) /////////////////////////



            CMSIS_SET(RCC, CR, HSI48ON, true);
            while (!CMSIS_GET(RCC, CR, HSI48RDY));



            ////////////////////////// Clock-Security-Internal ///////////////////////////



            CMSIS_SET(RCC, CR, CSION, true);
            while (!CMSIS_GET(RCC, CR, CSIRDY));



            //////////////////////////////////// PLLs ////////////////////////////////////



            CMSIS_SET
            (
                RCC    , PLL1CFGR,
                PLL1SRC, 0b01    ,
                PLL1M  , 8       ,
                PLL1RGE, 2       ,
                PLL1PEN, true    ,
            );
            CMSIS_SET
            (
                RCC  , PLL1DIVR,
                PLL1N, 125 - 1 ,
                PLL1P, 2 - 1   ,
            );
            CMSIS_SET(RCC, CR, PLL1ON, true);
            while (!CMSIS_GET(RCC, CR, PLL1RDY));



            //////////////////////// System Clock Generation Unit ////////////////////////



            CMSIS_SET
            (
                RCC  , CFGR2 ,
                HPRE , 0b0000,
                PPRE1, 0b000 ,
                PPRE2, 0b000 ,
                PPRE3, 0b000 ,
            );
            CMSIS_SET(RCC, CFGR1, SW, 0b011);
            while (CMSIS_GET(RCC, CFGR1, SWS) != 0b011);



            /////////////////////////////////// USART2 ///////////////////////////////////



            #define STPY_USART2_KERNEL_SOURCE 0b000
            #define STPY_USART2_BAUD_DIVIDER 250



            //////////////////////////////////// I2C1 ////////////////////////////////////



            #define STPY_I2C1_KERNEL_SOURCE 0b11
            #define STPY_I2C1_PRESC 15
            #define STPY_I2C1_SCLH 250
            #define STPY_I2C1_SCLL 250



            /////////////////////////////////// Timers ///////////////////////////////////



            #define STPY_GLOBAL_TIMER_PRESCALER false
            #define STPY_TIM1_DIVIDER (239 - 1)
            #define STPY_TIM1_MODULATION (65377 - 1)


        }
    #endif
    #undef STPY_IMPLEMENTATION
    #define STPY_0             (          0)
    #define STPY_CPU_CK        (250'000'000)
    #define STPY_HSI_CK        ( 32'000'000)
    #define STPY_HSI48_CK      ( 48'000'000)
    #define STPY_CSI_CK        (  4'000'000)
    #define STPY_AXI_AHB_CK    (250'000'000)
    #define STPY_PLL1P_CK      (250'000'000)
    #define STPY_PLL1_VCO_FREQ (500'000'000)
    #define STPY_APB1_CK       (250'000'000)
    #define STPY_APB2_CK       (250'000'000)
    #define STPY_APB3_CK       (250'000'000)
#endif
