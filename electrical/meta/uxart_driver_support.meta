#if TARGET_NAME_IS_SandboxNucleoH7S3L8
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART3) UXARTx; typeof(NVICInterrupt_USART3) NVICInterrupt_UXARTx; typeof(USART3_KERNEL_SOURCE_init) UXARTx_KERNEL_SOURCE_init; typeof(USART3_BAUD_DIVIDER_init) UXARTx_BAUD_DIVIDER_init; typeof((struct CMSISTuple) { &RCC->APB1RSTR1, RCC_APB1RSTR1_USART3RST_Pos, RCC_APB1RSTR1_USART3RST_Msk }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1ENR1, RCC_APB1ENR1_USART3EN_Pos, RCC_APB1ENR1_USART3EN_Msk }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR2, RCC_CCIPR2_UART234578SEL_Pos, RCC_CCIPR2_UART234578SEL_Msk }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART3, .NVICInterrupt_UXARTx = NVICInterrupt_USART3, .UXARTx_KERNEL_SOURCE_init = USART3_KERNEL_SOURCE_init, .UXARTx_BAUD_DIVIDER_init = USART3_BAUD_DIVIDER_init, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1RSTR1, RCC_APB1RSTR1_USART3RST_Pos, RCC_APB1RSTR1_USART3RST_Msk }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1ENR1, RCC_APB1ENR1_USART3EN_Pos, RCC_APB1ENR1_USART3EN_Msk }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR2, RCC_CCIPR2_UART234578SEL_Pos, RCC_CCIPR2_UART234578SEL_Msk } },
        };
#endif
#if TARGET_NAME_IS_SandboxNucleoH533RE
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART2) UXARTx; typeof(NVICInterrupt_USART2) NVICInterrupt_UXARTx; typeof(USART2_KERNEL_SOURCE_init) UXARTx_KERNEL_SOURCE_init; typeof(USART2_BAUD_DIVIDER_init) UXARTx_BAUD_DIVIDER_init; typeof((struct CMSISTuple) { &RCC->APB1LRSTR, RCC_APB1LRSTR_USART2RST_Pos, RCC_APB1LRSTR_USART2RST_Msk }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1LENR, RCC_APB1LENR_USART2EN_Pos, RCC_APB1LENR_USART2EN_Msk }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR1, RCC_CCIPR1_USART2SEL_Pos, RCC_CCIPR1_USART2SEL_Msk }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART2, .NVICInterrupt_UXARTx = NVICInterrupt_USART2, .UXARTx_KERNEL_SOURCE_init = USART2_KERNEL_SOURCE_init, .UXARTx_BAUD_DIVIDER_init = USART2_BAUD_DIVIDER_init, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1LRSTR, RCC_APB1LRSTR_USART2RST_Pos, RCC_APB1LRSTR_USART2RST_Msk }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1LENR, RCC_APB1LENR_USART2EN_Pos, RCC_APB1LENR_USART2EN_Msk }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR1, RCC_CCIPR1_USART2SEL_Pos, RCC_CCIPR1_USART2SEL_Msk } },
        };
#endif
#if TARGET_NAME_IS_DemoI2C
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART2) UXARTx; typeof(NVICInterrupt_USART2) NVICInterrupt_UXARTx; typeof(USART2_KERNEL_SOURCE_init) UXARTx_KERNEL_SOURCE_init; typeof(USART2_BAUD_DIVIDER_init) UXARTx_BAUD_DIVIDER_init; typeof((struct CMSISTuple) { &RCC->APB1LRSTR, RCC_APB1LRSTR_USART2RST_Pos, RCC_APB1LRSTR_USART2RST_Msk }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1LENR, RCC_APB1LENR_USART2EN_Pos, RCC_APB1LENR_USART2EN_Msk }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR1, RCC_CCIPR1_USART2SEL_Pos, RCC_CCIPR1_USART2SEL_Msk }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART2, .NVICInterrupt_UXARTx = NVICInterrupt_USART2, .UXARTx_KERNEL_SOURCE_init = USART2_KERNEL_SOURCE_init, .UXARTx_BAUD_DIVIDER_init = USART2_BAUD_DIVIDER_init, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1LRSTR, RCC_APB1LRSTR_USART2RST_Pos, RCC_APB1LRSTR_USART2RST_Msk }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1LENR, RCC_APB1LENR_USART2EN_Pos, RCC_APB1LENR_USART2EN_Msk }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR1, RCC_CCIPR1_USART2SEL_Pos, RCC_CCIPR1_USART2SEL_Msk } },
        };
#endif
#if TARGET_NAME_IS_DemoTimer
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART2) UXARTx; typeof(NVICInterrupt_USART2) NVICInterrupt_UXARTx; typeof(USART2_KERNEL_SOURCE_init) UXARTx_KERNEL_SOURCE_init; typeof(USART2_BAUD_DIVIDER_init) UXARTx_BAUD_DIVIDER_init; typeof((struct CMSISTuple) { &RCC->APB1LRSTR, RCC_APB1LRSTR_USART2RST_Pos, RCC_APB1LRSTR_USART2RST_Msk }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1LENR, RCC_APB1LENR_USART2EN_Pos, RCC_APB1LENR_USART2EN_Msk }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR1, RCC_CCIPR1_USART2SEL_Pos, RCC_CCIPR1_USART2SEL_Msk }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART2, .NVICInterrupt_UXARTx = NVICInterrupt_USART2, .UXARTx_KERNEL_SOURCE_init = USART2_KERNEL_SOURCE_init, .UXARTx_BAUD_DIVIDER_init = USART2_BAUD_DIVIDER_init, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1LRSTR, RCC_APB1LRSTR_USART2RST_Pos, RCC_APB1LRSTR_USART2RST_Msk }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1LENR, RCC_APB1LENR_USART2EN_Pos, RCC_APB1LENR_USART2EN_Msk }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR1, RCC_CCIPR1_USART2SEL_Pos, RCC_CCIPR1_USART2SEL_Msk } },
        };
#endif
#undef _EXPAND_HANDLE
#define _EXPAND_HANDLE\
    \
    if (!(0 <= handle && handle < UXARTHandle_COUNT))\
    {\
        panic;\
    }\
    \
    struct UXARTDriver* const driver = &_UXART_drivers[handle];\
    \
    auto const UXARTx = UXART_TABLE[handle].UXARTx;\
    auto const NVICInterrupt_UXARTx = UXART_TABLE[handle].NVICInterrupt_UXARTx;\
    auto const UXARTx_KERNEL_SOURCE_init = UXART_TABLE[handle].UXARTx_KERNEL_SOURCE_init;\
    auto const UXARTx_BAUD_DIVIDER_init = UXART_TABLE[handle].UXARTx_BAUD_DIVIDER_init;\
    auto const UXARTx_RESET = UXART_TABLE[handle].UXARTx_RESET;\
    auto const UXARTx_ENABLE = UXART_TABLE[handle].UXARTx_ENABLE;\
    auto const UXARTx_KERNEL_SOURCE = UXART_TABLE[handle].UXARTx_KERNEL_SOURCE;\


#if TARGET_NAME_IS_SandboxNucleoH7S3L8

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART3
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
#if TARGET_NAME_IS_SandboxNucleoH533RE

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART2
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
#if TARGET_NAME_IS_DemoI2C

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART2
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
#if TARGET_NAME_IS_DemoTimer

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART2
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
