#if TARGET_NAME_IS_SandboxNucleoH7S3L8
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART3) UXARTx; typeof(NVICInterrupt_USART3) NVICInterrupt_UXARTx; typeof(STPY_USART3_KERNEL_SOURCE) STPY_UXARTx_KERNEL_SOURCE; typeof(STPY_USART3_BAUD_DIVIDER) STPY_UXARTx_BAUD_DIVIDER; typeof((struct CMSISTuple) { &RCC->APB1RSTR1, CONCAT(RCC_, APB1RSTR1_USART3RST_Pos), CONCAT(RCC_, APB1RSTR1_USART3RST_Msk) }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1ENR1, CONCAT(RCC_, APB1ENR1_USART3EN_Pos), CONCAT(RCC_, APB1ENR1_USART3EN_Msk) }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR2, CONCAT(RCC_, CCIPR2_UART234578SEL_Pos), CONCAT(RCC_, CCIPR2_UART234578SEL_Msk) }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART3, .NVICInterrupt_UXARTx = NVICInterrupt_USART3, .STPY_UXARTx_KERNEL_SOURCE = STPY_USART3_KERNEL_SOURCE, .STPY_UXARTx_BAUD_DIVIDER = STPY_USART3_BAUD_DIVIDER, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1RSTR1, CONCAT(RCC_, APB1RSTR1_USART3RST_Pos), CONCAT(RCC_, APB1RSTR1_USART3RST_Msk) }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1ENR1, CONCAT(RCC_, APB1ENR1_USART3EN_Pos), CONCAT(RCC_, APB1ENR1_USART3EN_Msk) }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR2, CONCAT(RCC_, CCIPR2_UART234578SEL_Pos), CONCAT(RCC_, CCIPR2_UART234578SEL_Msk) } },
        };
#endif
#if TARGET_NAME_IS_SandboxNucleoH533RE
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART2) UXARTx; typeof(NVICInterrupt_USART2) NVICInterrupt_UXARTx; typeof(STPY_USART2_KERNEL_SOURCE) STPY_UXARTx_KERNEL_SOURCE; typeof(STPY_USART2_BAUD_DIVIDER) STPY_UXARTx_BAUD_DIVIDER; typeof((struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART2, .NVICInterrupt_UXARTx = NVICInterrupt_USART2, .STPY_UXARTx_KERNEL_SOURCE = STPY_USART2_KERNEL_SOURCE, .STPY_UXARTx_BAUD_DIVIDER = STPY_USART2_BAUD_DIVIDER, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) } },
        };
#endif
#if TARGET_NAME_IS_DemoI2C
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART2) UXARTx; typeof(NVICInterrupt_USART2) NVICInterrupt_UXARTx; typeof(STPY_USART2_KERNEL_SOURCE) STPY_UXARTx_KERNEL_SOURCE; typeof(STPY_USART2_BAUD_DIVIDER) STPY_UXARTx_BAUD_DIVIDER; typeof((struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART2, .NVICInterrupt_UXARTx = NVICInterrupt_USART2, .STPY_UXARTx_KERNEL_SOURCE = STPY_USART2_KERNEL_SOURCE, .STPY_UXARTx_BAUD_DIVIDER = STPY_USART2_BAUD_DIVIDER, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) } },
        };
#endif
#if TARGET_NAME_IS_DemoTimer
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART2) UXARTx; typeof(NVICInterrupt_USART2) NVICInterrupt_UXARTx; typeof(STPY_USART2_KERNEL_SOURCE) STPY_UXARTx_KERNEL_SOURCE; typeof(STPY_USART2_BAUD_DIVIDER) STPY_UXARTx_BAUD_DIVIDER; typeof((struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART2, .NVICInterrupt_UXARTx = NVICInterrupt_USART2, .STPY_UXARTx_KERNEL_SOURCE = STPY_USART2_KERNEL_SOURCE, .STPY_UXARTx_BAUD_DIVIDER = STPY_USART2_BAUD_DIVIDER, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) } },
        };
#endif
#if TARGET_NAME_IS_DemoSPI
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART2) UXARTx; typeof(NVICInterrupt_USART2) NVICInterrupt_UXARTx; typeof(STPY_USART2_KERNEL_SOURCE) STPY_UXARTx_KERNEL_SOURCE; typeof(STPY_USART2_BAUD_DIVIDER) STPY_UXARTx_BAUD_DIVIDER; typeof((struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART2, .NVICInterrupt_UXARTx = NVICInterrupt_USART2, .STPY_UXARTx_KERNEL_SOURCE = STPY_USART2_KERNEL_SOURCE, .STPY_UXARTx_BAUD_DIVIDER = STPY_USART2_BAUD_DIVIDER, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) } },
        };
#endif
#if TARGET_NAME_IS_DemoTimekeeping
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART2) UXARTx; typeof(NVICInterrupt_USART2) NVICInterrupt_UXARTx; typeof(STPY_USART2_KERNEL_SOURCE) STPY_UXARTx_KERNEL_SOURCE; typeof(STPY_USART2_BAUD_DIVIDER) STPY_UXARTx_BAUD_DIVIDER; typeof((struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART2, .NVICInterrupt_UXARTx = NVICInterrupt_USART2, .STPY_UXARTx_KERNEL_SOURCE = STPY_USART2_KERNEL_SOURCE, .STPY_UXARTx_BAUD_DIVIDER = STPY_USART2_BAUD_DIVIDER, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) } },
        };
#endif
#if TARGET_NAME_IS_DemoSDMMC
    enum UXARTHandle : u32
    {
        UXARTHandle_stlink,
    };
    static constexpr u32 UXARTHandle_COUNT = 1;
    #define UXARTx_ USART_
    static const struct { typeof(USART2) UXARTx; typeof(NVICInterrupt_USART2) NVICInterrupt_UXARTx; typeof(STPY_USART2_KERNEL_SOURCE) STPY_UXARTx_KERNEL_SOURCE; typeof(STPY_USART2_BAUD_DIVIDER) STPY_UXARTx_BAUD_DIVIDER; typeof((struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }) UXARTx_RESET; typeof((struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }) UXARTx_ENABLE; typeof((struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) }) UXARTx_KERNEL_SOURCE; } UXART_TABLE[] =
        {
            [UXARTHandle_stlink] = { .UXARTx = USART2, .NVICInterrupt_UXARTx = NVICInterrupt_USART2, .STPY_UXARTx_KERNEL_SOURCE = STPY_USART2_KERNEL_SOURCE, .STPY_UXARTx_BAUD_DIVIDER = STPY_USART2_BAUD_DIVIDER, .UXARTx_RESET = (struct CMSISTuple) { &RCC->APB1LRSTR, CONCAT(RCC_, APB1LRSTR_USART2RST_Pos), CONCAT(RCC_, APB1LRSTR_USART2RST_Msk) }, .UXARTx_ENABLE = (struct CMSISTuple) { &RCC->APB1LENR, CONCAT(RCC_, APB1LENR_USART2EN_Pos), CONCAT(RCC_, APB1LENR_USART2EN_Msk) }, .UXARTx_KERNEL_SOURCE = (struct CMSISTuple) { &RCC->CCIPR1, CONCAT(RCC_, CCIPR1_USART2SEL_Pos), CONCAT(RCC_, CCIPR1_USART2SEL_Msk) } },
        };
#endif
#undef _EXPAND_HANDLE
#define _EXPAND_HANDLE\
    \
    if (!(0 <= handle && handle < UXARTHandle_COUNT))\
    {\
        panic;\
    }\
    \
    struct UXARTDriver* const driver = &_UXART_drivers[handle];\
    \
    auto const UXARTx = UXART_TABLE[handle].UXARTx;\
    auto const NVICInterrupt_UXARTx = UXART_TABLE[handle].NVICInterrupt_UXARTx;\
    auto const STPY_UXARTx_KERNEL_SOURCE = UXART_TABLE[handle].STPY_UXARTx_KERNEL_SOURCE;\
    auto const STPY_UXARTx_BAUD_DIVIDER = UXART_TABLE[handle].STPY_UXARTx_BAUD_DIVIDER;\
    auto const UXARTx_RESET = UXART_TABLE[handle].UXARTx_RESET;\
    auto const UXARTx_ENABLE = UXART_TABLE[handle].UXARTx_ENABLE;\
    auto const UXARTx_KERNEL_SOURCE = UXART_TABLE[handle].UXARTx_KERNEL_SOURCE;\

#if TARGET_NAME_IS_SandboxNucleoH7S3L8

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART3
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
#if TARGET_NAME_IS_SandboxNucleoH533RE

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART2
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
#if TARGET_NAME_IS_DemoI2C

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART2
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
#if TARGET_NAME_IS_DemoTimer

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART2
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
#if TARGET_NAME_IS_DemoSPI

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART2
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
#if TARGET_NAME_IS_DemoTimekeeping

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART2
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
#if TARGET_NAME_IS_DemoSDMMC

    static void
    _UXART_update(enum UXARTHandle handle);

    INTERRUPT_USART2
    {
        _UXART_update(UXARTHandle_stlink);
    }

#endif
