(
    (systick_reload           (SysTick LOAD RELOAD   ) (.minmax 1 `(1 << 24) - 1`))
    (systick_use_cpu_ck       (SysTick CTRL CLKSOURCE))
    (systick_counter          (SysTick VAL  CURRENT  ) (.minmax 0 `(1 << 32) - 1`))
    (systick_interrupt_enable (SysTick CTRL TICKINT  ))
    (systick_enable           (SysTick CTRL ENABLE   ))

    # @/pg 456/fig 52/`H533rm`.
    (APB_UNITS (.value (1 2 3)))

    # @/pg 456/fig 52/`H533rm`.
    (PLL_UNITS (.value (
        (1 (p q r))
        (2 (p q r))
        (3 (p q r))
    )))

    # @/pg 52/tbl 10/`H533ds`. @/pg 456/fig 52/`H533rm`.
    (UXARTS (.value (
        ((usart 1))
        ((usart 2))
        ((usart 3))
        ((uart  4))
        ((uart  5))
        ((usart 6))
    )))

    (pll_channel_freq (.minmax   1_000_000 250_000_000)) # @/pg 124/tbl 47/`H533ds`. TODO We're assuming a high internal voltage and wide range.
    (pll_vco_freq     (.minmax 128_000_000 560_000_000)) # "                         TODO Assuming wide frequency range.
    (cpu_freq         (.minmax           0 250_000_000)) # @/pg 101/tbl 21/`HS33ds`. TODO We're assuming a high internal voltage. TODO 600MHz only when ECC is disabled.
    (axi_ahb_freq     (.minmax           0 250_000_000)) # "
    (apb_freq         (.minmax           0 250_000_000)) # "

    # @/pg 318/sec 7.11.1/`H533rm`.
    (flash_programming_delay (FLASH ACR WRHIGHFREQ) (.value (
        0b00
        0b01
        0b10
    )))
    (flash_latency (FLASH ACR LATENCY) (.minmax 0b0000 0b1111))

    (internal_voltage_scaling (PWR VOSCR VOS      )) # @/pg 438/sec 10.11.4/`H533rm`.
    (current_active_vos       (PWR VOSSR ACTVOS   )) # @/pg 439/sec 10.11.5/`H533rm`.
    (current_active_vos_ready (PWR VOSSR ACTVOSRDY)) # "
    (ldo_enable               (PWR SCCR  LDOEN    )) # @/pg 443/sec 10.11.10/`H533rm`.
    (power_management_bypass  (PWR SCCR  BYPASS   )) # "

    # @/pg 481/sec 11.8.1/`H533rm`.
    (pll{UNIT}_ready  (RCC CR PLL3RDY ) (UNIT : 3))
    (pll{UNIT}_enable (RCC CR PLL3ON  ) (UNIT : 3))
    (pll{UNIT}_ready  (RCC CR PLL2RDY ) (UNIT : 2))
    (pll{UNIT}_enable (RCC CR PLL2ON  ) (UNIT : 2))
    (pll{UNIT}_ready  (RCC CR PLL1RDY ) (UNIT : 1))
    (pll{UNIT}_enable (RCC CR PLL1ON  ) (UNIT : 1))
    (hsi48_ready      (RCC CR HSI48RDY)           )
    (hsi48_enable     (RCC CR HSI48ON )           )
    (csi_ready        (RCC CR CSIRDY  )           )
    (csi_enable       (RCC CR CSION   )           )
    (hsi_ready        (RCC CR HSIRDY  )           )
    (hsi_enable       (RCC CR HSION   )           )

    # @/pg 486/sec 11.8.5/`H533rm`.
    (effective_scgu_clock_source (RCC CFGR1 SWS) (.value (
        (hsi_ck    0b000)
        (csi_ck    0b001)
        (hse_ck    0b010)
        (pll1_p_ck 0b011)
    )))
    (scgu_clock_source (RCC CFGR1 SW) (.value (
        (hsi_ck    0b000)
        (csi_ck    0b001)
        (hse_ck    0b010)
        (pll1_p_ck 0b011)
    )))

    # @/pg 488/sec 11.8.6/`H533rm`.
    (apb{UNIT}_divider (RCC CFGR2 PPRE3) (.value ((1 0b000) (2 0b100) (4 0b101) (8 0b110) (16 0b111))) (UNIT : 3))
    (apb{UNIT}_divider (RCC CFGR2 PPRE2) (.value ((1 0b000) (2 0b100) (4 0b101) (8 0b110) (16 0b111))) (UNIT : 2))
    (apb{UNIT}_divider (RCC CFGR2 PPRE1) (.value ((1 0b000) (2 0b100) (4 0b101) (8 0b110) (16 0b111))) (UNIT : 1))
    (cpu_divider       (RCC CFGR2 HPRE ) (.value (
        (1   0b0000) # Low three bits are don't-care.
        (2   0b1000)
        (4   0b1001)
        (8   0b1010)
        (16  0b1011)
        (64  0b1100)
        (128 0b1101)
        (256 0b1110)
        (512 0b1111)
    )))

    # @/pg 491/sec 11.8.7/`H533rm`.
    (pll{UNIT}{CHANNEL}_enable (RCC PLL1CFGR PLL1REN) (UNIT : 1) (CHANNEL : r))
    (pll{UNIT}{CHANNEL}_enable (RCC PLL1CFGR PLL1QEN) (UNIT : 1) (CHANNEL : q))
    (pll{UNIT}{CHANNEL}_enable (RCC PLL1CFGR PLL1PEN) (UNIT : 1) (CHANNEL : p))
    (pll{UNIT}_predivider      (RCC PLL1CFGR PLL1M  ) (UNIT : 1) (.minmax 1 63))
    (pll{UNIT}_clock_source    (RCC PLL1CFGR PLL1SRC) (UNIT : 1) (.value (
        (None   0b00)
        (hsi_ck 0b01)
        (csi_ck 0b10)
        (hse_ck 0b11)
    )))
    (pll{UNIT}_input_range (RCC PLL1CFGR PLL1RGE) (UNIT : 1) (.value (
        ( 1_000_000 None)
        ( 2_000_000 None) # Can be '0b00', but only for medium VCO. @/pg 124/tbl 47/`H533rm`.
        ( 4_000_000 0b01)
        ( 8_000_000 0b10)
        (16_000_000 0b11)
    )))

    # @/pg 492/sec 11.8.8/`H533rm`.
    (pll{UNIT}{CHANNEL}_enable (RCC PLL2CFGR PLL2REN) (UNIT : 2) (CHANNEL : r))
    (pll{UNIT}{CHANNEL}_enable (RCC PLL2CFGR PLL2QEN) (UNIT : 2) (CHANNEL : q))
    (pll{UNIT}{CHANNEL}_enable (RCC PLL2CFGR PLL2PEN) (UNIT : 2) (CHANNEL : p))
    (pll{UNIT}_predivider      (RCC PLL2CFGR PLL2M  ) (UNIT : 2) (.minmax 1 63))
    (pll{UNIT}_clock_source    (RCC PLL2CFGR PLL2SRC) (UNIT : 2) (.value (
        (None   0b00)
        (hsi_ck 0b01)
        (csi_ck 0b10)
        (hse_ck 0b11)
    )))
    (pll{UNIT}_input_range (RCC PLL2CFGR PLL2RGE) (UNIT : 2) (.value (
        ( 1_000_000 None)
        ( 2_000_000 None) # Can be '0b00', but only for medium VCO. @/pg 124/tbl 47/`H533rm`.
        ( 4_000_000 0b01)
        ( 8_000_000 0b10)
        (16_000_000 0b11)
    )))

    # @/pg 494/sec 11.8.9/`H533rm`.
    (pll{UNIT}{CHANNEL}_enable (RCC PLL3CFGR PLL3REN) (UNIT : 3) (CHANNEL : r))
    (pll{UNIT}{CHANNEL}_enable (RCC PLL3CFGR PLL3QEN) (UNIT : 3) (CHANNEL : q))
    (pll{UNIT}{CHANNEL}_enable (RCC PLL3CFGR PLL3PEN) (UNIT : 3) (CHANNEL : p))
    (pll{UNIT}_predivider      (RCC PLL3CFGR PLL3M  ) (UNIT : 3) (.minmax 1 63))
    (pll{UNIT}_clock_source    (RCC PLL3CFGR PLL3SRC) (UNIT : 3) (.value (
        (None   0b00)
        (hsi_ck 0b01)
        (csi_ck 0b10)
        (hse_ck 0b11)
    )))
    (pll{UNIT}_input_range (RCC PLL3CFGR PLL3RGE) (UNIT : 3) (.value (
        ( 1_000_000 None)
        ( 2_000_000 None) # Can be '0b00', but only for medium VCO. @/pg 124/tbl 47/`H533rm`.
        ( 4_000_000 0b01)
        ( 8_000_000 0b10)
        (16_000_000 0b11)
    )))

    # @/pg 496/sec 11.8.10/`H533rm`.
    (pll{UNIT}{CHANNEL}_divider (RCC PLL1DIVR PLL1R) (.minmax 1 128) (UNIT : 1) (CHANNEL : r))
    (pll{UNIT}{CHANNEL}_divider (RCC PLL1DIVR PLL1Q) (.minmax 1 128) (UNIT : 1) (CHANNEL : q))
    (pll{UNIT}{CHANNEL}_divider (RCC PLL1DIVR PLL1P) (.minmax 1 128) (UNIT : 1) (CHANNEL : p))
    (pll{UNIT}_multiplier       (RCC PLL1DIVR PLL1N) (.minmax 4 512) (UNIT : 1)              )

    # @/pg 497/sec 11.8.12/`H533rm`.
    (pll{UNIT}{CHANNEL}_divider (RCC PLL2DIVR PLL2R) (.minmax 1 128) (UNIT : 2) (CHANNEL : r))
    (pll{UNIT}{CHANNEL}_divider (RCC PLL2DIVR PLL2Q) (.minmax 1 128) (UNIT : 2) (CHANNEL : q))
    (pll{UNIT}{CHANNEL}_divider (RCC PLL2DIVR PLL2P) (.minmax 1 128) (UNIT : 2) (CHANNEL : p))
    (pll{UNIT}_multiplier       (RCC PLL2DIVR PLL2N) (.minmax 4 512) (UNIT : 2)              )

    # @/pg 499/sec 11.8.14/`H533rm`.
    (pll{UNIT}{CHANNEL}_divider (RCC PLL3DIVR PLL3R) (.minmax 1 128) (UNIT : 3) (CHANNEL : r))
    (pll{UNIT}{CHANNEL}_divider (RCC PLL3DIVR PLL3Q) (.minmax 1 128) (UNIT : 3) (CHANNEL : q))
    (pll{UNIT}{CHANNEL}_divider (RCC PLL3DIVR PLL3P) (.minmax 1 128) (UNIT : 3) (CHANNEL : p))
    (pll{UNIT}_multiplier       (RCC PLL3DIVR PLL3N) (.minmax 4 512) (UNIT : 3)              )

    # @/pg 518/sec 11.8.27/`H533rm`.
    (GPIO_PORT_ENABLE_REGISTER (.value AHB2ENR))

    # @/pg 521/sec 11.8.29/`H533rm`.
    (uxart_{UNIT}_enable (RCC APB1LENR USART2EN) (UNIT : 2))

    # @/pg 541/sec 11.8.40/`H533rm`.
    (uxart_{UNITS}_clock_source (RCC CCIPR1 USART2SEL) (UNITS : ((usart 2))) (.value (
        (apb1_ck    0b000)
        (pll2_q_ck  0b001)
        (pll3_q_ck  0b010)
        (hsi_ker_ck 0b011)
        (csi_ker_ck 0b100)
        (None       0b110)
        # TODO: (lse_ck     0b101)
    )))
    (uxart_{UNITS}_clock_source (RCC CCIPR1 USART3SEL) (UNITS : ((usart 3))) (.value (
        (apb1_ck    0b000)
        (pll2_q_ck  0b001)
        (pll3_q_ck  0b010)
        (hsi_ker_ck 0b011)
        (csi_ker_ck 0b100)
        (None       0b110)
        # TODO: (lse_ck     0b101)
    )))
    (uxart_{UNITS}_clock_source (RCC CCIPR1 USART6SEL) (UNITS : ((usart 6))) (.value (
        (apb1_ck    0b000)
        (pll2_q_ck  0b001)
        (pll3_q_ck  0b010)
        (hsi_ker_ck 0b011)
        (csi_ker_ck 0b100)
        (None       0b110)
        # TODO: (lse_ck     0b101)
    )))

    # @/pg 549/sec 11.8.44/`H533rm`. TODO hse_ck.
    (per_ck_source (RCC CCIPR5 CKPERSEL) (.value (
        (hsi_ck 0b00)
        (csi_ck 0b01)
        (None   0b11)
    )))

    # @/pg 586/sec 13.4.1/`H533rm`.
    (GPIO_MODE (.value (
        (input     0b00)
        (output    0b01)
        (alternate 0b10)
        (analog    0b11)
    )))

    # @/pg 2315/sec 50.8.6/`H533rm`.
    (uxart_baud_divider (USART BRR BRR) (.minmax 1 `1 << 16`))
)
